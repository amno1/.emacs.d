Content-Type: text/enriched
Text-Width: 80

<x-color><param>#586e75</param># -*- eval: (progn (setq org-startup-folded 'overview) (org-babel-goto-named-src-block "onstartup") (org-babel-execute-src-block)); -*-</x-color>
<x-color><param>#cb4b16</param>* About</x-color>
<x-color><param>#002b36</param>*</x-color><x-color><param>#859900</param>* To fix</x-color>
   [[https://dev.to/viglioni/how-i-set-up-my-emacs-for-typescript-3eeh]]
   https://github.com/clemera/helm-ido-like-guide
<x-color><param>#002b36</param>*</x-color><x-color><param>#859900</param>* Introduction</x-color>

   A personal setup, based on my init file generator tool.

<x-color><param>#002b36</param>*</x-color><x-color><param>#859900</param>* Licence</x-color>
   Copyright (C) 2020  Arthur Miller

   Author: Arthur Miller <<arthur.miller@live.com>

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation, either version 3 of the License, or
   (at your option) any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program.  If not, see <<https://www.gnu.org/licenses/>.

<x-color><param>#cb4b16</param>* Generator</x-color>
<italic><x-color><param>#586e75</param>#+NAME: onstartup</x-color></italic>
#+begin_src emacs-lisp :results output silent
(<bold><x-color><param>#859900</param>defvar</x-color></bold> <x-color><param>#268bd2</param>init-file-bake-autoloads</x-color> t)
(<bold><x-color><param>#859900</param>defvar</x-color></bold> <x-color><param>#268bd2</param>init-file-verbose-messages</x-color> nil)
(<bold><x-color><param>#859900</param>defvar</x-color></bold> <x-color><param>#268bd2</param>init-file-unroll-key-bindings</x-color> t)
(<bold><x-color><param>#859900</param>defvar</x-color></bold> <x-color><param>#268bd2</param>init-file-use-modules</x-color> nil)
(<bold><x-color><param>#859900</param>defvar</x-color></bold> <x-color><param>#268bd2</param>init-file-modules-directory</x-color> (expand-file-name <x-color><param>#2aa198</param>"elc-cache/"</x-color> user-emacs-directory))
(<bold><x-color><param>#859900</param>defvar</x-color></bold> <x-color><param>#268bd2</param>init-file-lisp-directory</x-color> (expand-file-name <x-color><param>#2aa198</param>"lisp/"</x-color> user-emacs-directory))
(<bold><x-color><param>#859900</param>defvar</x-color></bold> <x-color><param>#268bd2</param>init-file-source-repositories</x-color> (list package-user-dir init-file-lisp-directory))

(<bold><x-color><param>#859900</param>defvar</x-color></bold> <x-color><param>#268bd2</param>init-file--autoloads-map</x-color> (make-hash-table <bold><x-color><param>#839496</param>:test</x-color></bold> 'equal))
(<bold><x-color><param>#859900</param>defvar</x-color></bold> <x-color><param>#268bd2</param>init-file--loadpaths-map</x-color> (make-hash-table <bold><x-color><param>#839496</param>:test</x-color></bold> 'equal))


(<bold><x-color><param>#859900</param>require</x-color></bold> '<bold><x-color><param>#268bd2</param>package</x-color></bold>)


(<bold><x-color><param>#859900</param>setq</x-color></bold> package-archives nil)

(<bold><x-color><param>#859900</param>defvar</x-color></bold> <x-color><param>#268bd2</param>site-archive</x-color> '(<x-color><param>#2aa198</param>"local"</x-color> . <x-color><param>#2aa198</param>"/home/arthur/repos/"</x-color>))
(<bold><x-color><param>#859900</param>defvar</x-color></bold> <x-color><param>#268bd2</param>org-archive</x-color> '(<x-color><param>#2aa198</param>"org"</x-color> . <x-color><param>#2aa198</param>"https://orgmode.org/elpa/"</x-color>))
(<bold><x-color><param>#859900</param>defvar</x-color></bold> <x-color><param>#268bd2</param>gnu-archive</x-color> '(<x-color><param>#2aa198</param>"elpa"</x-color> . <x-color><param>#2aa198</param>"https://elpa.gnu.org/packages/"</x-color>))
(<bold><x-color><param>#859900</param>defvar</x-color></bold> <x-color><param>#268bd2</param>melpa-archive</x-color> '(<x-color><param>#2aa198</param>"melpa"</x-color> . <x-color><param>#2aa198</param>"https://melpa.org/packages/"</x-color>))
(<bold><x-color><param>#859900</param>defvar</x-color></bold> <x-color><param>#268bd2</param>nelpa-archive</x-color> '(<x-color><param>#2aa198</param>"nelpa"</x-color> . <x-color><param>#2aa198</param>"https://elpa.nongnu.org/nongnu/"</x-color>))
(<bold><x-color><param>#859900</param>defvar</x-color></bold> <x-color><param>#268bd2</param>marmalade-archive</x-color> '(<x-color><param>#2aa198</param>"marmalade"</x-color> . <x-color><param>#2aa198</param>"https://marmalade-repo.org/packages/"</x-color>))


(add-to-list 'package-archives site-archive)
(add-to-list 'package-archives org-archive)
(add-to-list 'package-archives gnu-archive)
(add-to-list 'package-archives nelpa-archive)
(add-to-list 'package-archives melpa-archive)
<x-color><param>#586e75</param>;;(add-to-list 'package-archives marmalade-archive)

</x-color>(<bold><x-color><param>#859900</param>setq</x-color></bold> package-archives (nreverse package-archives))

(<bold><x-color><param>#859900</param>unless</x-color></bold> (file-directory-p init-file-modules-directory)
  (make-directory init-file-modules-directory))
(<bold><x-color><param>#859900</param>unless</x-color></bold> (boundp 'init-file-hooks)
  (make-variable-buffer-local 'init-file-hooks))
(<bold><x-color><param>#859900</param>unless</x-color></bold> (boundp 'init-file-package-list)
  (make-variable-buffer-local 'init-file-package-list))


(<bold><x-color><param>#859900</param>defun</x-color></bold> <x-color><param>#268bd2</param>on-buffer-change-hook</x-color> (beg eng len)
  (<bold><x-color><param>#859900</param>setq</x-color></bold> init-file-package-list nil))

(add-hook 'after-change-functions 'on-buffer-change-hook)


(<bold><x-color><param>#859900</param>defmacro</x-color></bold> <x-color><param>#268bd2</param>with-hook</x-color> (name <x-color><param>#b58900</param>&rest</x-color> body)
  (<bold><x-color><param>#859900</param>let</x-color></bold> (found hook)
    (<bold><x-color><param>#859900</param>setq</x-color></bold> name (<bold><x-color><param>#859900</param>if</x-color></bold> (string-match <x-color><param>#2aa198</param>"-hook\\'"</x-color> (symbol-name `,name))
                   `,name
                 (intern (concat (symbol-name name) <x-color><param>#2aa198</param>"-hook"</x-color>))))
    (<bold><x-color><param>#859900</param>setq</x-color></bold> body (nreverse body))
    (<bold><x-color><param>#859900</param>dolist</x-color></bold> (hook init-file-hooks)
      (<bold><x-color><param>#859900</param>when</x-color></bold> (equal (symbol-name (car hook)) (symbol-name name))
        (<bold><x-color><param>#859900</param>dolist</x-color></bold> (sexp (nreverse (cdr hook)))
          (add-to-list 'body sexp))
        (setcdr hook body)
        (<bold><x-color><param>#859900</param>setq</x-color></bold> found t)))
    (<bold><x-color><param>#859900</param>unless</x-color></bold> found
      (add-to-list 'init-file-hooks (cons name body)))
    (ignore)))


(<bold><x-color><param>#859900</param>defmacro</x-color></bold> <x-color><param>#268bd2</param>verbose</x-color> (format-string <x-color><param>#b58900</param>&rest</x-color> args )
  (<bold><x-color><param>#859900</param>when</x-color></bold> init-file-verbose-messages
    `(message ,format-string ,@args)))


(<bold><x-color><param>#859900</param>defun</x-color></bold> <x-color><param>#268bd2</param>clean-init-file</x-color> ()
  (<bold><x-color><param>#859900</param>interactive</x-color></bold>)
  (<bold><x-color><param>#859900</param>with-temp-buffer</x-color></bold>
    (insert-file-contents <x-color><param>#2aa198</param>"init.el"</x-color>)
    (beginning-of-buffer)
    (<bold><x-color><param>#859900</param>while</x-color></bold> (not (eobp))
      (<bold><x-color><param>#859900</param>when</x-color></bold> (char-equal (char-after) ?\^M)
        (delete-char 1))
      (forward-char 1))
    (write-region (point-min) (point-max) <x-color><param>#2aa198</param>"init.el"</x-color>)))


(<bold><x-color><param>#859900</param>defmacro</x-color></bold> <x-color><param>#268bd2</param>after-load</x-color> (name <x-color><param>#b58900</param>&rest</x-color> body)
  (<bold><x-color><param>#859900</param>with-eval-after-load</x-color></bold> name
    `(<bold><x-color><param>#859900</param>progn</x-color></bold> ,@body)))


(<bold><x-color><param>#859900</param>defmacro</x-color></bold> <x-color><param>#268bd2</param>with-package</x-color> (name <x-color><param>#b58900</param>&rest</x-color> body)
  (<bold><x-color><param>#859900</param>verbose</x-color></bold> <x-color><param>#2aa198</param>"Parsing package %s"</x-color> name)
  (<bold><x-color><param>#859900</param>let</x-color></bold> ((package (symbol-name name)))
    (append-to-init-file <x-color><param>#2aa198</param>"(with-eval-after-load "</x-color>)
    (append-to-init-file (concat <x-color><param>#2aa198</param>"'"</x-color> package <x-color><param>#2aa198</param>"\n "</x-color>))
    (emit-to-init-file body)
    (append-to-init-file <x-color><param>#2aa198</param>")\n"</x-color>)))


(<bold><x-color><param>#859900</param>defmacro</x-color></bold> <x-color><param>#268bd2</param>when-idle</x-color> (<x-color><param>#b58900</param>&rest</x-color> body)
  `(run-with-idle-timer 0.5 nil (<bold><x-color><param>#859900</param>lambda</x-color></bold> () ,@body)))


(<bold><x-color><param>#859900</param>defmacro</x-color></bold> <x-color><param>#268bd2</param>with-system</x-color> (systype <x-color><param>#b58900</param>&rest</x-color> body)
  (<bold><x-color><param>#859900</param>if</x-color></bold> (equal system-type systype)
      `(<bold><x-color><param>#859900</param>progn</x-color></bold> ,@body)))


(<bold><x-color><param>#859900</param>defmacro</x-color></bold> <x-color><param>#268bd2</param>with-host</x-color> (host <x-color><param>#b58900</param>&rest</x-color> body)
  (<bold><x-color><param>#859900</param>if</x-color></bold> (equal system-name host)
      `(<bold><x-color><param>#859900</param>progn</x-color></bold> ,@body)))


(<bold><x-color><param>#859900</param>defmacro</x-color></bold> <x-color><param>#268bd2</param>defkeys</x-color> (mapname <x-color><param>#b58900</param>&rest</x-color> body)
  `(<bold><x-color><param>#859900</param>let</x-color></bold> ((defs '(,@body)))
     (<bold><x-color><param>#859900</param>while</x-color></bold> defs
       (define-key ,mapname
                   (<bold><x-color><param>#859900</param>if</x-color></bold> (vectorp (car defs))
                       (car defs)
                     (read-kbd-macro (car defs)))
                   (<bold><x-color><param>#859900</param>if</x-color></bold> (<bold><x-color><param>#859900</param>or</x-color></bold> (listp (cadr defs)) (functionp (cadr defs)))
                       (cadr defs)
                     (<bold><x-color><param>#859900</param>if</x-color></bold> `(keymapp (<bold><x-color><param>#859900</param>bound-and-true-p</x-color></bold> ,(cadr defs)))
                         (eval (cadr defs)))))
       (<bold><x-color><param>#859900</param>setq</x-color></bold> defs (cddr defs)))))


(<bold><x-color><param>#859900</param>defun</x-color></bold> <x-color><param>#268bd2</param>emit-defkeys</x-color> (map keys)
  (<bold><x-color><param>#859900</param>while</x-color></bold> keys
    (append-to-init-file
     (concat <x-color><param>#2aa198</param>"(define-key "</x-color>  (symbol-name map) <x-color><param>#2aa198</param>" "</x-color>
             (<bold><x-color><param>#859900</param>if</x-color></bold> (vectorp (car keys))
                 (prin1-to-string (car keys))
               (concat <x-color><param>#2aa198</param>"(kbd \""</x-color> (car keys) <x-color><param>#2aa198</param>"\")"</x-color>))
             <x-color><param>#2aa198</param>" #'"</x-color> (prin1-to-string (cadr keys))
             <x-color><param>#2aa198</param>")"</x-color>))
    (<bold><x-color><param>#859900</param>setq</x-color></bold> keys (cddr keys))))


(<bold><x-color><param>#859900</param>defun</x-color></bold> <x-color><param>#268bd2</param>emit-when-idle</x-color> (sexp)
  (append-to-init-file
   (format <x-color><param>#2aa198</param>"(run-with-idle-timer 0.5 nil (lambda () %s))"</x-color> sexp)))


(<bold><x-color><param>#859900</param>defun</x-color></bold> <x-color><param>#268bd2</param>append-to-init-file</x-color> (data <x-color><param>#b58900</param>&optional</x-color> file)
  (<bold><x-color><param>#859900</param>unless</x-color></bold> file (<bold><x-color><param>#859900</param>setq</x-color></bold> file <x-color><param>#2aa198</param>"init.el"</x-color>))
  (<bold><x-color><param>#859900</param>let</x-color></bold> (insert-point)
    (<bold><x-color><param>#859900</param>cond</x-color></bold> ((stringp data)
           (write-region data nil file t 0))
          ((bufferp data)
           (<bold><x-color><param>#859900</param>with-current-buffer</x-color></bold> data
             (write-region (point-min) (point-max) file t 0))))))


(<bold><x-color><param>#859900</param>defun</x-color></bold> <x-color><param>#268bd2</param>emit-sexp-to-init-file</x-color> (sexp)
  (<bold><x-color><param>#859900</param>if</x-color></bold> init-file-unroll-key-bindings
      (<bold><x-color><param>#859900</param>cond</x-color></bold> ((equal (car sexp) 'defkeys)
             (emit-defkeys (cadr sexp) (cddr sexp)))
            ((equal (car sexp) 'with-system)
             (<bold><x-color><param>#859900</param>when</x-color></bold> (equal (cadr sexp) system-type)
               (emit-to-init-file (cddr sexp))))
            ((equal (car sexp) 'when-idle)
             (emit-when-idle (cadr sexp)))
            (t
             (append-to-init-file (prin1-to-string sexp))))
    (append-to-init-file (prin1-to-string sexp))))


(<bold><x-color><param>#859900</param>defun</x-color></bold> <x-color><param>#268bd2</param>emit-to-init-file</x-color> (<x-color><param>#b58900</param>&rest</x-color> body)
  (<bold><x-color><param>#859900</param>dolist</x-color></bold> (sexp body)
    (<bold><x-color><param>#859900</param>if</x-color></bold> (listp (car sexp))
        (<bold><x-color><param>#859900</param>dolist</x-color></bold> (s sexp)
          (emit-sexp-to-init-file s))
      (emit-sexp-to-init-file sexp))))


(<bold><x-color><param>#859900</param>defun</x-color></bold> <x-color><param>#268bd2</param>emit-packages</x-color> ()
  (message <x-color><param>#2aa198</param>"Emiting packages ..."</x-color>)
  (<bold><x-color><param>#859900</param>dolist</x-color></bold> (p (get-package-list))
    (<bold><x-color><param>#859900</param>verbose</x-color></bold> <x-color><param>#2aa198</param>"Checking package: %s"</x-color> (aref p 0))
    (<bold><x-color><param>#859900</param>when</x-color></bold> (package-enabled-p p)
      (<bold><x-color><param>#859900</param>verbose</x-color></bold> <x-color><param>#2aa198</param>"Emiting package: %s"</x-color> (aref p 0))
      (eval-region (aref p 4) (aref p 5)))))


(<bold><x-color><param>#859900</param>defun</x-color></bold> <x-color><param>#268bd2</param>emit-hooks</x-color> ()
  (message <x-color><param>#2aa198</param>"Emiting hooks ..."</x-color>)
  (<bold><x-color><param>#859900</param>dolist</x-color></bold> (hook init-file-hooks)
    (<bold><x-color><param>#859900</param>verbose</x-color></bold> <x-color><param>#2aa198</param>"Hook: %s"</x-color> (car hook))
    (<bold><x-color><param>#859900</param>if</x-color></bold> (equal (symbol-name (car hook)) <x-color><param>#2aa198</param>"early-init-hook"</x-color>)
        (<bold><x-color><param>#859900</param>dolist</x-color></bold> (elt (nreverse (cdr hook)))
          (append-to-init-file (prin1-to-string elt) <x-color><param>#2aa198</param>"early-init.el"</x-color>))
      (<bold><x-color><param>#859900</param>progn</x-color></bold>
        (append-to-init-file (concat <x-color><param>#2aa198</param>"(add-hook '"</x-color>
                                     (symbol-name (car hook))
                                     <x-color><param>#2aa198</param>" #'(lambda nil\n"</x-color>))
        (<bold><x-color><param>#859900</param>dolist</x-color></bold> (s (cdr hook))
          (emit-to-init-file s))
        (append-to-init-file <x-color><param>#2aa198</param>"))"</x-color>)))))


(<bold><x-color><param>#859900</param>defun</x-color></bold> <x-color><param>#268bd2</param>get-load-paths</x-color>()
  (<bold><x-color><param>#859900</param>let</x-color></bold> ((elpa (expand-file-name <x-color><param>#2aa198</param>"elpa"</x-color> user-emacs-directory))
        (archives (expand-file-name <x-color><param>#2aa198</param>"elpa/archives"</x-color> user-emacs-directory))
        package-paths)
    (<bold><x-color><param>#859900</param>dolist</x-color></bold> (path (directory-files elpa t directory-files-no-dot-files-regexp))
      (<bold><x-color><param>#859900</param>when</x-color></bold> (file-directory-p path)
        (<bold><x-color><param>#859900</param>unless</x-color></bold> (string= path archives)
          (<bold><x-color><param>#859900</param>push</x-color></bold> path package-paths))))
    (<bold><x-color><param>#859900</param>push</x-color></bold> init-file-lisp-directory package-paths)
    package-paths))


(<bold><x-color><param>#859900</param>defun</x-color></bold> <x-color><param>#268bd2</param>emit-load-paths</x-color> ()
  (message <x-color><param>#2aa198</param>"Emitting load-path"</x-color>)
  (append-to-init-file (concat <x-color><param>#2aa198</param>"\n(nconc load-path '"</x-color>
                               (prin1-to-string (get-load-paths))
                               <x-color><param>#2aa198</param>")\n"</x-color>)
                       <x-color><param>#2aa198</param>"early-init.el"</x-color>))


(<bold><x-color><param>#859900</param>defun</x-color></bold> <x-color><param>#268bd2</param>quoted</x-color> (sym)
  (<bold><x-color><param>#859900</param>if</x-color></bold> (<bold><x-color><param>#859900</param>and</x-color></bold> (consp sym) (eq (car sym) 'quote))
      sym `(<bold><x-color><param>#859900</param>quote</x-color></bold> ,sym)))


(<bold><x-color><param>#859900</param>defun</x-color></bold> <x-color><param>#268bd2</param>interactivep</x-color> (form)
  <x-color><param>#2aa198</param>"Weather form is an interactive command."</x-color>
  (<bold><x-color><param>#859900</param>catch</x-color></bold> '<bold><x-color><param>#268bd2</param>interactive</x-color></bold>
    (<bold><x-color><param>#859900</param>dolist</x-color></bold> (sxp form)
      (<bold><x-color><param>#859900</param>and</x-color></bold> (listp sxp) (equal 'interactive (car sxp))
           (<bold><x-color><param>#859900</param>throw</x-color></bold> '<bold><x-color><param>#268bd2</param>interactive</x-color></bold> t)))))


(<bold><x-color><param>#859900</param>defun</x-color></bold> <x-color><param>#268bd2</param>macro-p</x-color> (form)
  <x-color><param>#2aa198</param>"Weather FORM isn a macro definition."</x-color>
  (equal (car form) 'defmacro))


(<bold><x-color><param>#859900</param>defun</x-color></bold> <x-color><param>#268bd2</param>collect-autoloads</x-color> (src)
  (<bold><x-color><param>#859900</param>verbose</x-color></bold> <x-color><param>#2aa198</param>"Collecting autoloads for file: %s"</x-color> src)
  (<bold><x-color><param>#859900</param>let</x-color></bold> (sxp sym interactive macro file)
    (<bold><x-color><param>#859900</param>with-current-buffer</x-color></bold> (get-buffer-create <x-color><param>#2aa198</param>"*ql-buffer*"</x-color>)
      (erase-buffer)
      (insert-file-contents src)
      (goto-char (point-min))
      (<bold><x-color><param>#859900</param>while</x-color></bold> (re-search-forward <x-color><param>#2aa198</param>"^;;;###autoload"</x-color> nil t)
        (<bold><x-color><param>#859900</param>setq</x-color></bold> sxp nil sym nil)
        (<bold><x-color><param>#859900</param>setq</x-color></bold> sxp (<bold><x-color><param>#859900</param>ignore-errors</x-color></bold> (read (current-buffer))))
        (<bold><x-color><param>#859900</param>when</x-color></bold> (listp sxp)
          (<bold><x-color><param>#859900</param>setq</x-color></bold> sym (quoted (cadr sxp))
                interactive (interactivep sxp)
                macro (macro-p sxp)
                file (file-name-nondirectory src))
          (<bold><x-color><param>#859900</param>unless</x-color></bold> (listp (cadr sym))
            (puthash sym (list 'autoload sym file nil interactive macro)
                     init-file--autoloads-map)))))))


(<bold><x-color><param>#859900</param>defun</x-color></bold> <x-color><param>#268bd2</param>generate-autoloads</x-color> (dir-tree-or-dir-tree-list <x-color><param>#b58900</param>&optional</x-color> outfile)
  (<bold><x-color><param>#859900</param>let</x-color></bold> ((index 0) srcs package-activated-list pkgname
        (tofile (<bold><x-color><param>#859900</param>or</x-color></bold> outfile (expand-file-name <x-color><param>#2aa198</param>"autoloads.el"</x-color> user-emacs-directory))))
    (<bold><x-color><param>#859900</param>if</x-color></bold> (listp dir-tree-or-dir-tree-list)
        (<bold><x-color><param>#859900</param>dolist</x-color></bold> (dir-tree dir-tree-or-dir-tree-list)
          (<bold><x-color><param>#859900</param>setq</x-color></bold> srcs

                (nconc srcs (directory-files-recursively dir-tree <x-color><param>#2aa198</param>"\\.el$"</x-color> nil t t))))
      (<bold><x-color><param>#859900</param>setq</x-color></bold> srcs

            (directory-files-recursively dir-tree-or-dir-tree-list <x-color><param>#2aa198</param>"\\.el$"</x-color> nil t t)))
    (<bold><x-color><param>#859900</param>dolist</x-color></bold> (src srcs)

      (<bold><x-color><param>#859900</param>when</x-color></bold> (string-match-p <x-color><param>#2aa198</param>"-pkg\\.el"</x-color> src)

        (<bold><x-color><param>#859900</param>push</x-color></bold> (make-symbol (file-name-base src)) package-activated-list))
      (<bold><x-color><param>#859900</param>when</x-color></bold> (<bold><x-color><param>#859900</param>and</x-color></bold> (not (string-match-p <x-color><param>#2aa198</param>"-pkg\\.el"</x-color> src))
                 (not (string-match-p <x-color><param>#2aa198</param>"-autoloads\\.el"</x-color> src)))
        (collect-autoloads src)))
    (<bold><x-color><param>#859900</param>with-temp-file</x-color></bold> tofile
      (maphash (<bold><x-color><param>#859900</param>lambda</x-color></bold> (sym sxp)
                 (prin1 sxp (current-buffer)) (insert <x-color><param>#2aa198</param>"\n"</x-color>))
               init-file--autoloads-map)

      (pp `(<bold><x-color><param>#859900</param>setq</x-color></bold> package-activated-list

                 (append ',package-activated-list

                         package-activated-list))

          (current-buffer)))
    (kill-buffer (get-buffer-create <x-color><param>#2aa198</param>"*ql-buffer*"</x-color>))))


(<bold><x-color><param>#859900</param>defun</x-color></bold> <x-color><param>#268bd2</param>emit-autoloads</x-color> ()
  (message <x-color><param>#2aa198</param>"Emiting autoloads"</x-color>)
  (<bold><x-color><param>#859900</param>let</x-color></bold> ((al (expand-file-name <x-color><param>#2aa198</param>"autoloads.el"</x-color> user-emacs-directory)))
    (<bold><x-color><param>#859900</param>verbose</x-color></bold> <x-color><param>#2aa198</param>"Generating autoloads: %s"</x-color> al)
    (generate-autoloads init-file-source-repositories)))


(<bold><x-color><param>#859900</param>defmacro</x-color></bold> <x-color><param>#268bd2</param>maybe-remove-file</x-color> (file)
  `(<bold><x-color><param>#859900</param>when</x-color></bold> (file-exists-p ,file)
     (delete-file ,file)
     (message <x-color><param>#2aa198</param>"Removed file %s"</x-color> ,file)))


(<bold><x-color><param>#859900</param>defun</x-color></bold> <x-color><param>#268bd2</param>tangle-init-file</x-color> (<x-color><param>#b58900</param>&optional</x-color> file)
  (message <x-color><param>#2aa198</param>"Exporting init files."</x-color>)
  (<bold><x-color><param>#859900</param>unless</x-color></bold> file
    (<bold><x-color><param>#859900</param>setq</x-color></bold> file <x-color><param>#2aa198</param>"init.el"</x-color>))
  (<bold><x-color><param>#859900</param>maybe-remove-file</x-color></bold> <x-color><param>#2aa198</param>"init.el"</x-color>)
  (<bold><x-color><param>#859900</param>maybe-remove-file</x-color></bold> <x-color><param>#2aa198</param>"init.elc"</x-color>)
  (<bold><x-color><param>#859900</param>maybe-remove-file</x-color></bold> <x-color><param>#2aa198</param>"early-init.el"</x-color>)
  (<bold><x-color><param>#859900</param>with-temp-file</x-color></bold> <x-color><param>#2aa198</param>"init.el"</x-color>
    (insert <x-color><param>#2aa198</param>";; init.el -*- lexical-binding: t; -*-\n"</x-color>)
    (insert <x-color><param>#2aa198</param>";; This file is machine generated by init-file generator, don't edit\n"</x-color>)
    (insert <x-color><param>#2aa198</param>";; manually, edit instead file init.org and generate new init file from it.\n\n"</x-color>))
  (<bold><x-color><param>#859900</param>with-temp-file</x-color></bold> <x-color><param>#2aa198</param>"early-init.el"</x-color>
    (insert <x-color><param>#2aa198</param>";; early-init.el -*- lexical-binding: t; -*-\n"</x-color>)
    (insert <x-color><param>#2aa198</param>";; This file is machine generated by init-file generator, don't edit\n"</x-color>)
    (insert <x-color><param>#2aa198</param>";; manually, edit instead file init.org and generate new init file from it.\n\n"</x-color>))
  (<bold><x-color><param>#859900</param>setq</x-color></bold> init-file-hooks nil)
  <x-color><param>#586e75</param>;; are we baking quickstart file?
</x-color>  (<bold><x-color><param>#859900</param>when</x-color></bold> init-file-bake-autoloads
    (emit-autoloads)
    (<bold><x-color><param>#859900</param>with-temp-buffer</x-color></bold>
      (insert-file-contents-literally <x-color><param>#2aa198</param>"autoloads.el"</x-color>)
      (append-to-init-file (current-buffer))))
  <x-color><param>#586e75</param>;; generate stuff
</x-color>  (emit-packages)
  <x-color><param>#586e75</param>;; do this after user init stuff
</x-color>  (emit-hooks) <x-color><param>#586e75</param>;; must be done after emiting packages
</x-color>  (emit-load-paths)<x-color><param>#586e75</param>;; must be done after emiting hooks
</x-color>  <x-color><param>#586e75</param>;; fix init.el
</x-color>  (append-to-init-file <x-color><param>#2aa198</param>"\n;; Local Variables:\n"</x-color>)
  (append-to-init-file <x-color><param>#2aa198</param>";; byte-compile-warnings: '(not docstrings free-vars))\n"</x-color>)
  (append-to-init-file <x-color><param>#2aa198</param>";; End:\n"</x-color>)
  (clean-init-file))


(<bold><x-color><param>#859900</param>defun</x-color></bold> <x-color><param>#268bd2</param>goto-code-start</x-color> (section)
  (goto-char (point-min))
  (re-search-forward section)
  (re-search-forward <x-color><param>#2aa198</param>"begin_src.*emacs-lisp"</x-color>)
  (skip-chars-forward <x-color><param>#2aa198</param>"\s\t\n\r"</x-color>))


(<bold><x-color><param>#859900</param>defun</x-color></bold> <x-color><param>#268bd2</param>goto-code-end</x-color> ()
  (re-search-forward <x-color><param>#2aa198</param>"end_src"</x-color>)
  (beginning-of-line))


(<bold><x-color><param>#859900</param>defun</x-color></bold> <x-color><param>#268bd2</param>generate-init-files</x-color> ()
  (<bold><x-color><param>#859900</param>interactive</x-color></bold>)
  (message <x-color><param>#2aa198</param>"Exporting init.el ..."</x-color>)
  (tangle-init-file)
  (<bold><x-color><param>#859900</param>setq</x-color></bold> byte-compile-warnings nil)
  (<bold><x-color><param>#859900</param>let</x-color></bold> ((tangled-file <x-color><param>#2aa198</param>"init.el"</x-color>)
        (byte-compile-warnings nil)
        (fill-column 240))
    <x-color><param>#586e75</param>;; always produce elc file
</x-color>    (byte-compile-file tangled-file)
    (<bold><x-color><param>#859900</param>verbose</x-color></bold> <x-color><param>#2aa198</param>"Byte compiled %s"</x-color> tangled-file)
    (<bold><x-color><param>#859900</param>when</x-color></bold> (<bold><x-color><param>#859900</param>featurep</x-color></bold> '<bold><x-color><param>#268bd2</param>comp</x-color></bold>)
      (native-compile tangled-file)
      (<bold><x-color><param>#859900</param>verbose</x-color></bold> <x-color><param>#2aa198</param>"Tangled and compiled %s"</x-color> tangled-file))
  (<bold><x-color><param>#859900</param>verbose</x-color></bold> <x-color><param>#2aa198</param>"Done."</x-color>)
  (message <x-color><param>#2aa198</param>"Compiling early-init.el ..."</x-color>)
  (byte-compile-file (expand-file-name <x-color><param>#2aa198</param>"early-init.el"</x-color>  user-emacs-directory))
  (message <x-color><param>#2aa198</param>"Done."</x-color>)))

(<bold><x-color><param>#859900</param>defun</x-color></bold> <x-color><param>#268bd2</param>install-file</x-color> (file)
  (<bold><x-color><param>#859900</param>when</x-color></bold> (file-exists-p file)
    (<bold><x-color><param>#859900</param>unless</x-color></bold> (equal (file-name-directory buffer-file-name)
                   (expand-file-name user-emacs-directory))
      (copy-file file user-emacs-directory t))
    (message <x-color><param>#2aa198</param>"Wrote: %s."</x-color> file)))


(<bold><x-color><param>#859900</param>defun</x-color></bold> <x-color><param>#268bd2</param>install-init-files</x-color> ()
  (<bold><x-color><param>#859900</param>interactive</x-color></bold>)
  (<bold><x-color><param>#859900</param>let</x-color></bold> ((i <x-color><param>#2aa198</param>"init.el"</x-color>)
        (ic <x-color><param>#2aa198</param>"init.elc"</x-color>)
        (ei <x-color><param>#2aa198</param>"early-init.el"</x-color>)
        (al <x-color><param>#2aa198</param>"autoloads.el"</x-color>)
        (pq (expand-file-name <x-color><param>#2aa198</param>"package-quickstart.el"</x-color> user-emacs-directory))
        (pqc (expand-file-name <x-color><param>#2aa198</param>"package-quickstart.elc"</x-color> user-emacs-directory)))
    (install-file i)
    (install-file ei)
    (<bold><x-color><param>#859900</param>unless</x-color></bold> (file-exists-p ic)
      (byte-compile (expand-file-name el)))
    (install-file ic)
    (<bold><x-color><param>#859900</param>unless</x-color></bold> init-file-bake-autoloads
      (byte-compile pq))
    (<bold><x-color><param>#859900</param>when</x-color></bold> init-file-bake-autoloads
      <x-color><param>#586e75</param>;; remove package-quickstart files from .emacs.d
</x-color>      (<bold><x-color><param>#859900</param>when</x-color></bold> (file-exists-p pq)
        (delete-file pq))
      (<bold><x-color><param>#859900</param>when</x-color></bold> (file-exists-p pqc)
        (delete-file pqc)))))


(<bold><x-color><param>#859900</param>defmacro</x-color></bold> <x-color><param>#268bd2</param>gt</x-color> (n1 n2)
  `(> ,n1 ,n2))

(<bold><x-color><param>#859900</param>defmacro</x-color></bold> <x-color><param>#268bd2</param>gte</x-color> (n1 n2)
  `(>= ,n1 ,n2))

(<bold><x-color><param>#859900</param>defmacro</x-color></bold> <x-color><param>#268bd2</param>lt</x-color> (n1 n2)
  `(<< ,n1 ,n2))

(<bold><x-color><param>#859900</param>defmacro</x-color></bold> <x-color><param>#268bd2</param>lte</x-color> (n1 n2)
  `(<<= ,n1 ,n2))


(<bold><x-color><param>#859900</param>defun</x-color></bold> <x-color><param>#268bd2</param>package-name</x-color> (package)
  (aref package 0))

(<bold><x-color><param>#859900</param>defun</x-color></bold> <x-color><param>#268bd2</param>package-enabled-p</x-color> (package)
  (aref package 1))

(<bold><x-color><param>#859900</param>defun</x-color></bold> <x-color><param>#268bd2</param>package-pseudo-p</x-color> (package)
  (aref package 2))

(<bold><x-color><param>#859900</param>defun</x-color></bold> <x-color><param>#268bd2</param>package-pinned-to</x-color> (package)
  (aref package 3))

(<bold><x-color><param>#859900</param>defun</x-color></bold> <x-color><param>#268bd2</param>package-code-beg</x-color> (package)
  (aref package 4))

(<bold><x-color><param>#859900</param>defun</x-color></bold> <x-color><param>#268bd2</param>package-code-end</x-color> (package)
  (aref package 5))


(<bold><x-color><param>#859900</param>defun</x-color></bold> <x-color><param>#268bd2</param>get-package-list</x-color> ()
  (<bold><x-color><param>#859900</param>when</x-color></bold> (buffer-modified-p)
    (<bold><x-color><param>#859900</param>setq</x-color></bold> init-file-package-list nil))
  (<bold><x-color><param>#859900</param>unless</x-color></bold> init-file-package-list
    (<bold><x-color><param>#859900</param>save-excursion</x-color></bold>
      (goto-char (point-min))
      (<bold><x-color><param>#859900</param>let</x-color></bold> (package packages start end
                    config-start config-end ms me s)
        (goto-char (point-min))
        (<bold><x-color><param>#859900</param>verbose</x-color></bold> <x-color><param>#2aa198</param>"Creating package list ..."</x-color>)
        (re-search-forward <x-color><param>#2aa198</param>"^\\* Packages"</x-color>)
        (<bold><x-color><param>#859900</param>while</x-color></bold> (re-search-forward <x-color><param>#2aa198</param>"^\\*\\* "</x-color> (eobp) t)
          <x-color><param>#586e75</param>;; format: [name enabled pseudo pinned-to code-start-pos code-end-pos fetch-url]
</x-color>          (<bold><x-color><param>#859900</param>setq</x-color></bold> package (vector <x-color><param>#2aa198</param>""</x-color> t nil <x-color><param>#2aa198</param>""</x-color> 0 0 <x-color><param>#2aa198</param>""</x-color>)
                config-start (point) end (line-end-position))
          <x-color><param>#586e75</param>;; package name
</x-color>          (<bold><x-color><param>#859900</param>while</x-color></bold> (search-forward <x-color><param>#2aa198</param>"] "</x-color> end t) )
          (<bold><x-color><param>#859900</param>setq</x-color></bold> start (point))
          (skip-chars-forward <x-color><param>#2aa198</param>"[a-zA-Z\\-]"</x-color>)
          (aset package 0
                (buffer-substring-no-properties start (point)))
          (goto-char (line-beginning-position))
          <x-color><param>#586e75</param>;; enabled?
</x-color>          (<bold><x-color><param>#859900</param>when</x-color></bold> (search-forward <x-color><param>#2aa198</param>"[ ]"</x-color> end t)
            (aset package 1 nil))
          (goto-char (line-beginning-position))
          (search-forward <x-color><param>#2aa198</param>"["</x-color> end t)
          (<bold><x-color><param>#859900</param>setq</x-color></bold> ms (point))
          (goto-char (line-beginning-position))
          (search-forward <x-color><param>#2aa198</param>"]"</x-color> end t)
          (<bold><x-color><param>#859900</param>setq</x-color></bold> me (- (point) 1))
          (<bold><x-color><param>#859900</param>setq</x-color></bold> s (buffer-substring-no-properties ms me))
          (<bold><x-color><param>#859900</param>when</x-color></bold> (<bold><x-color><param>#859900</param>gt</x-color></bold> (length s) 1)
            (<bold><x-color><param>#859900</param>setq</x-color></bold> s (string-trim s))
            <x-color><param>#586e75</param>;; installable?
</x-color>            (<bold><x-color><param>#859900</param>if</x-color></bold> (<bold><x-color><param>#859900</param>or</x-color></bold> (equal s <x-color><param>#2aa198</param>"local"</x-color>) (equal s <x-color><param>#2aa198</param>"none"</x-color>))
                (aset package 2 t)
              <x-color><param>#586e75</param>;; pinned to repository?
</x-color>              (aset package 3 s)))
          (goto-char start)
          <x-color><param>#586e75</param>;; code start
</x-color>          (re-search-forward <x-color><param>#2aa198</param>"begin_src.*emacs-lisp"</x-color> (eobp) t)
          (aset package 4 (point))
          (re-search-forward <x-color><param>#2aa198</param>"end_src$"</x-color> (eobp) t)
          (beginning-of-line)
          (aset package 5 (- (point) 1))
          <x-color><param>#586e75</param>;; are we fetching from somewhere?
</x-color>          (goto-char (aref package 5))
          (<bold><x-color><param>#859900</param>when</x-color></bold> (re-search-backward <x-color><param>#2aa198</param>"^[ \t].*GIT:"</x-color> config-start t)
            (search-forward <x-color><param>#2aa198</param>"GIT:"</x-color>)
            (skip-chars-forward <x-color><param>#2aa198</param>" \t"</x-color>)
            (<bold><x-color><param>#859900</param>setq</x-color></bold> start (point))
            (end-of-line)
            (skip-chars-backward <x-color><param>#2aa198</param>" \t"</x-color>)
            (aset package 6
                  (buffer-substring-no-properties start (point))))
          (<bold><x-color><param>#859900</param>push</x-color></bold> package init-file-package-list)
          (<bold><x-color><param>#859900</param>setq</x-color></bold> init-file-package-list (nreverse init-file-package-list))))))
  init-file-package-list)


<x-color><param>#586e75</param>;; Install packages
</x-color>(<bold><x-color><param>#859900</param>defun</x-color></bold> <x-color><param>#268bd2</param>ensure-package</x-color> (package)
  (<bold><x-color><param>#859900</param>let</x-color></bold> ((p (intern (aref package 0))))
    (<bold><x-color><param>#859900</param>unless</x-color></bold> (package-installed-p p)
      (message <x-color><param>#2aa198</param>"Installing package: %s"</x-color> p)
      (package-install p))))


(<bold><x-color><param>#859900</param>defun</x-color></bold> <x-color><param>#268bd2</param>install-packages</x-color> (<x-color><param>#b58900</param>&optional</x-color> packages)
  (<bold><x-color><param>#859900</param>interactive</x-color></bold>)
  (package-refresh-contents)
  (<bold><x-color><param>#859900</param>unless</x-color></bold> packages
    (<bold><x-color><param>#859900</param>setq</x-color></bold> packages (get-package-list)))
  (<bold><x-color><param>#859900</param>dolist</x-color></bold> (p packages)
    (<bold><x-color><param>#859900</param>unless</x-color></bold> (package-pseudo-p p)
      (<bold><x-color><param>#859900</param>unless</x-color></bold> (string-empty-p (aref p 3))
        (add-to-list 'package-pinned-packages (cons (intern (aref p 0)) (aref p 3))))
      (ensure-package p))))


(<bold><x-color><param>#859900</param>defun</x-color></bold> <x-color><param>#268bd2</param>current-package</x-color> ()
  <x-color><param>#2aa198</param>"Return name of package the cursor is at the moment."</x-color>
  (<bold><x-color><param>#859900</param>save-excursion</x-color></bold>
    (<bold><x-color><param>#859900</param>let</x-color></bold> (nb ne pn (start (point)))
      (<bold><x-color><param>#859900</param>when</x-color></bold> (re-search-backward <x-color><param>#2aa198</param>"^\\* Packages"</x-color> (point-min) t)
        (<bold><x-color><param>#859900</param>setq</x-color></bold> nb (point))
        (goto-char start)
        (<bold><x-color><param>#859900</param>setq</x-color></bold> pn (search-forward <x-color><param>#2aa198</param>"** "</x-color> (line-end-position) t 1))
        (<bold><x-color><param>#859900</param>unless</x-color></bold> pn
          (<bold><x-color><param>#859900</param>setq</x-color></bold> pn (search-backward <x-color><param>#2aa198</param>"** "</x-color> nb t 1)))
        (<bold><x-color><param>#859900</param>when</x-color></bold> pn
          (search-forward <x-color><param>#2aa198</param>"] "</x-color>)
          (<bold><x-color><param>#859900</param>setq</x-color></bold> nb (point))
          (re-search-forward <x-color><param>#2aa198</param>"[\n[:blank:]]"</x-color>)
          (forward-char -1)
          (<bold><x-color><param>#859900</param>setq</x-color></bold> ne (point))
          (<bold><x-color><param>#859900</param>setq</x-color></bold> pn (buffer-substring-no-properties nb ne))
          pn)))))


(<bold><x-color><param>#859900</param>defun</x-color></bold> <x-color><param>#268bd2</param>install-and-configure</x-color> ()
  (<bold><x-color><param>#859900</param>interactive</x-color></bold>)
  (install-packages)
  (generate-init-files)
  (install-init-files))


(<bold><x-color><param>#859900</param>defun</x-color></bold> <x-color><param>#268bd2</param>configure-emacs</x-color> ()
  (<bold><x-color><param>#859900</param>interactive</x-color></bold>)
  (generate-init-files)
  (install-init-files))


(<bold><x-color><param>#859900</param>defalias</x-color></bold> '<x-color><param>#268bd2</param>version-lt</x-color> 'version-list-<<)

(<bold><x-color><param>#859900</param>defun</x-color></bold> <x-color><param>#268bd2</param>org-init-update-packages</x-color> ()
  (<bold><x-color><param>#859900</param>interactive</x-color></bold>)
  (package-refresh-contents)
  (<bold><x-color><param>#859900</param>dolist</x-color></bold> (package package-activated-list)
    (<bold><x-color><param>#859900</param>let*</x-color></bold> ((new (cadr (assq package package-archive-contents)))
           (old (cadr (assq package package-alist)))
           to-install)
      (<bold><x-color><param>#859900</param>when</x-color></bold> (<bold><x-color><param>#859900</param>and</x-color></bold> new old (version-lt (package-desc-version old) (package-desc-version new)))
        (<bold><x-color><param>#859900</param>setq</x-color></bold> to-install
              (package-compute-transaction (list new) (package-desc-reqs new)))
        (message <x-color><param>#2aa198</param>"Installing package: %S"</x-color> (package-desc-dir new))
        (package-download-transaction to-install)
        (message <x-color><param>#2aa198</param>"Removed package: %S"</x-color> (package-desc-dir old))
        (<bold><x-color><param>#859900</param>and</x-color></bold> (file-directory-p (package-desc-dir old))
             (not (file-symlink-p (package-desc-dir old)))
             (delete-directory (package-desc-dir old) t))))))


<x-color><param>#586e75</param>;;; </x-color>org hacks<x-color><param>#586e75</param>

</x-color>(<bold><x-color><param>#859900</param>if</x-color></bold> (<bold><x-color><param>#859900</param>featurep</x-color></bold> '<bold><x-color><param>#268bd2</param>org-heading-checkbox</x-color></bold>)
    (unload-feature 'org-heading-checkbox))

(<bold><x-color><param>#859900</param>defvar</x-color></bold> <x-color><param>#268bd2</param>org-init--enabled-re</x-color> <x-color><param>#2aa198</param>"^[ \t]*\\*+.*?[ \t]*\\[<bold><x-color><param>#268bd2</param>x\\</x-color></bold>]"</x-color>)
(<bold><x-color><param>#859900</param>defvar</x-color></bold> <x-color><param>#268bd2</param>org-init--disabled-re</x-color> <x-color><param>#2aa198</param>"^[ \t]*\\*+.*?[ \t]*\\[ \\]"</x-color>)
(<bold><x-color><param>#859900</param>defvar</x-color></bold> <x-color><param>#268bd2</param>org-init--checkbox-re</x-color> <x-color><param>#2aa198</param>"^[ \t]*\\*+.*?\\[[ x]\\]"</x-color>)


(<bold><x-color><param>#859900</param>defun</x-color></bold> <x-color><param>#268bd2</param>org-init--heading-checkbox-p</x-color> ()
  <x-color><param>#2aa198</param>"Return t if this is a heading with a checkbox."</x-color>
  (<bold><x-color><param>#859900</param>save-excursion</x-color></bold>
    (beginning-of-line)
    (looking-at org-init--checkbox-re)))


(<bold><x-color><param>#859900</param>defun</x-color></bold> <x-color><param>#268bd2</param>org-init--checkbox-enabled-p</x-color> ()
  <x-color><param>#2aa198</param>"Return t if point is at a heading with an enabed checkbox."</x-color>
  (<bold><x-color><param>#859900</param>save-excursion</x-color></bold>
    (beginning-of-line)
    (looking-at <x-color><param>#2aa198</param>"^[ \t]*\\*+.*?\\[<bold><x-color><param>#268bd2</param>x\\</x-color></bold>]"</x-color>)))


(<bold><x-color><param>#859900</param>defun</x-color></bold> <x-color><param>#268bd2</param>org-init--checkbox-disabled-p</x-color> ()
  <x-color><param>#2aa198</param>"Return t if point is at a heading with a disabeled checkbox."</x-color>
  (<bold><x-color><param>#859900</param>save-excursion</x-color></bold>
    (beginning-of-line)
    (looking-at <x-color><param>#2aa198</param>"^[ \t]*\\*+.*?\\[ \\]"</x-color>)))


(<bold><x-color><param>#859900</param>defun</x-color></bold> <x-color><param>#268bd2</param>org-init--checkbox-enable</x-color> ()
  <x-color><param>#2aa198</param>"Disable checkbox for heading at point."</x-color>
  (<bold><x-color><param>#859900</param>interactive</x-color></bold>)
  (<bold><x-color><param>#859900</param>when</x-color></bold> (org-init--checkbox-enabled-p)
    (<bold><x-color><param>#859900</param>save-excursion</x-color></bold>
      (beginning-of-line)
      (replace-string <x-color><param>#2aa198</param>"[ ]"</x-color> <x-color><param>#2aa198</param>"[x]"</x-color> nil (line-beginning-position)
                      (line-end-position)))))


(<bold><x-color><param>#859900</param>defun</x-color></bold> <x-color><param>#268bd2</param>org-init--checkbox-disable</x-color> ()
  <x-color><param>#2aa198</param>"Disable checkbox for heading at point."</x-color>
  (<bold><x-color><param>#859900</param>interactive</x-color></bold>)
  (<bold><x-color><param>#859900</param>when</x-color></bold> (org-init--checkbox-enabled-p)
    (<bold><x-color><param>#859900</param>save-excursion</x-color></bold>
      (beginning-of-line)
      (replace-string <x-color><param>#2aa198</param>"[x]"</x-color> <x-color><param>#2aa198</param>"[ ]"</x-color> nil (line-beginning-position)
                      (line-end-position)))))


(<bold><x-color><param>#859900</param>defun</x-color></bold> <x-color><param>#268bd2</param>org-init--checkbox-toggle</x-color> ()
  <x-color><param>#2aa198</param>"Toggle state of checkbox at heading under the point."</x-color>
  (<bold><x-color><param>#859900</param>interactive</x-color></bold>)
  (<bold><x-color><param>#859900</param>save-excursion</x-color></bold>
    (beginning-of-line)
    (<bold><x-color><param>#859900</param>cond</x-color></bold> ((looking-at org-init--enabled-re)
           (replace-string <x-color><param>#2aa198</param>"[x]"</x-color> <x-color><param>#2aa198</param>"[ ]"</x-color> nil (line-beginning-position)
                           (line-end-position)))
          ((looking-at org-init--disabled-re)
           (replace-string <x-color><param>#2aa198</param>"[ ]"</x-color> <x-color><param>#2aa198</param>"[x]"</x-color> nil (line-beginning-position)
                           (line-end-position)))
          (t (<bold>error</bold> <x-color><param>#2aa198</param>"Not at org-init-checkbox line."</x-color>)))))


(<bold><x-color><param>#859900</param>defun</x-color></bold> <x-color><param>#268bd2</param>org-init--packages</x-color> ()
  <x-color><param>#2aa198</param>"Return start of packages; point after the \"* Packages\" heading."</x-color>
  (<bold><x-color><param>#859900</param>save-excursion</x-color></bold>
    <x-color><param>#586e75</param>;; we search backward, which will find beginning of line if the current
</x-color>    <x-color><param>#586e75</param>;; point is after the heading
</x-color>    (<bold><x-color><param>#859900</param>cond</x-color></bold> ((re-search-backward <x-color><param>#2aa198</param>"^\\* Packages"</x-color> (point-min) t)
           (point))
          <x-color><param>#586e75</param>;; the point was after the heading, and now we are at the point-min
</x-color>          ((re-search-forward <x-color><param>#2aa198</param>"^\\* Packages"</x-color> nil t)
           (beginning-of-line)
           (point))
          <x-color><param>#586e75</param>;; we didn't found the Packages section, means invalid file
</x-color>          (t (<bold>error</bold> <x-color><param>#2aa198</param>"No Packages section in current file found."</x-color>)))))


<x-color><param>#586e75</param>;; help fns to work with init.org
</x-color>(<bold><x-color><param>#859900</param>defun</x-color></bold> <x-color><param>#268bd2</param>add-package</x-color> (package)
  (<bold><x-color><param>#859900</param>interactive</x-color></bold> <x-color><param>#2aa198</param>"sPackage name: "</x-color>)
  (goto-char (org-init--packages))
  (forward-line 1)
  (insert (concat <x-color><param>#2aa198</param>"\n** [x] "</x-color>
                  package
                  <x-color><param>#2aa198</param>"\n#+begin_src emacs-lisp\n"</x-color>
                  <x-color><param>#2aa198</param>"\n#+end_src\n"</x-color>))
  (forward-line -2))


(<bold><x-color><param>#859900</param>defun</x-color></bold> <x-color><param>#268bd2</param>add-git-package</x-color> (url)
  (<bold><x-color><param>#859900</param>interactive</x-color></bold> <x-color><param>#2aa198</param>"sGIT url: "</x-color>)
  (<bold><x-color><param>#859900</param>unless</x-color></bold> (string-empty-p url)
    (<bold><x-color><param>#859900</param>let</x-color></bold> ((tokens (split-string url <x-color><param>#2aa198</param>"/"</x-color> t <x-color><param>#2aa198</param>"\s\t"</x-color>)) package)
      (message <x-color><param>#2aa198</param>"T: %S"</x-color> tokens)
      (<bold><x-color><param>#859900</param>dolist</x-color></bold> (tk tokens)
        (<bold><x-color><param>#859900</param>setq</x-color></bold> package tk))
      (goto-char (org-init--packages))
      (forward-line 1)
      (insert (concat <x-color><param>#2aa198</param>"\n** [x] "</x-color> package
                      <x-color><param>#2aa198</param>"\n#+GIT: "</x-color> url
                      <x-color><param>#2aa198</param>"\n#+begin_src emacs-lisp\n"</x-color>
                      <x-color><param>#2aa198</param>"\n#+end_src\n"</x-color>))
      (forward-line -2))))


(<bold><x-color><param>#859900</param>defun</x-color></bold> <x-color><param>#268bd2</param>org-init--package-enabled-p</x-color> ()
  <x-color><param>#2aa198</param>"Return t if point is in a package headline and package is enabled."</x-color>
  (<bold><x-color><param>#859900</param>save-excursion</x-color></bold>
    (beginning-of-line)
    (looking-at <x-color><param>#2aa198</param>"^[ \t]*\\*\\* \\[<bold><x-color><param>#268bd2</param>x\\</x-color></bold>]"</x-color>)))


(<bold><x-color><param>#859900</param>defun</x-color></bold> <x-color><param>#268bd2</param>org-init--toggle-headline-checkbox</x-color> ()
  <x-color><param>#2aa198</param>"Switch between enabled/disabled todo state."</x-color>
  (<bold><x-color><param>#859900</param>if</x-color></bold> (org-init--package-enabled-p)
      (org-todo 2)
    (org-todo 1)))


(<bold><x-color><param>#859900</param>defun</x-color></bold> <x-color><param>#268bd2</param>org-init--package-section-p</x-color> ()
  (<bold><x-color><param>#859900</param>save-excursion</x-color></bold>
    (<bold><x-color><param>#859900</param>let</x-color></bold> ((current-point (point)))
      (<bold><x-color><param>#859900</param>when</x-color></bold> (re-search-backward <x-color><param>#2aa198</param>"^\\* Packages"</x-color> nil t)
        (forward-line 1)
        (<bold><x-color><param>#859900</param>gte</x-color></bold> current-point (point))))))


(<bold><x-color><param>#859900</param>defun</x-color></bold> <x-color><param>#268bd2</param>org-init--shiftup</x-color> ()
  <x-color><param>#2aa198</param>"Switch between enabled/disabled todo state."</x-color>
  (<bold><x-color><param>#859900</param>interactive</x-color></bold>)
  (<bold><x-color><param>#859900</param>if</x-color></bold> (org-init--package-section-p)
      (<bold><x-color><param>#859900</param>save-excursion</x-color></bold>
        (beginning-of-line)
        (<bold><x-color><param>#859900</param>unless</x-color></bold> (looking-at org-heading-regexp)
          (re-search-backward org-heading-regexp))
        (<bold><x-color><param>#859900</param>if</x-color></bold> (org-init--heading-checkbox-p)
            (org-init--checkbox-toggle)))
    (org-shiftup)))


(<bold><x-color><param>#859900</param>defun</x-color></bold> <x-color><param>#268bd2</param>org-init--shiftdown</x-color> ()
  <x-color><param>#2aa198</param>"Switch between enabled/disabled todo state."</x-color>
  (<bold><x-color><param>#859900</param>interactive</x-color></bold>)
  (<bold><x-color><param>#859900</param>if</x-color></bold> (org-init--package-section-p)
      (<bold><x-color><param>#859900</param>save-excursion</x-color></bold>
        (beginning-of-line)
        (<bold><x-color><param>#859900</param>unless</x-color></bold> (looking-at org-heading-regexp)
          (re-search-backward org-heading-regexp))
        (<bold><x-color><param>#859900</param>if</x-color></bold> (org-init--heading-checkbox-p)
            (org-init--checkbox-toggle)))
    (org-shiftdown)))


(<bold><x-color><param>#859900</param>defun</x-color></bold> <x-color><param>#268bd2</param>org-init--shiftright</x-color> ()
  <x-color><param>#2aa198</param>"Switch between enabled/disabled todo state."</x-color>
  (<bold><x-color><param>#859900</param>interactive</x-color></bold>)
  (<bold><x-color><param>#859900</param>if</x-color></bold> (org-init--package-section-p)
      (<bold><x-color><param>#859900</param>save-excursion</x-color></bold>
        (beginning-of-line)
        (<bold><x-color><param>#859900</param>unless</x-color></bold> (looking-at org-heading-regexp)
          (re-search-backward org-heading-regexp))
        (org-shiftright))
    (org-shiftright)))


(<bold><x-color><param>#859900</param>defun</x-color></bold> <x-color><param>#268bd2</param>org-init--shiftleft</x-color> ()
  <x-color><param>#2aa198</param>"Switch between enabled/disabled todo state."</x-color>
  (<bold><x-color><param>#859900</param>interactive</x-color></bold>)
  (<bold><x-color><param>#859900</param>if</x-color></bold> (org-init--package-section-p)
      (<bold><x-color><param>#859900</param>save-excursion</x-color></bold>
        (beginning-of-line)
        (<bold><x-color><param>#859900</param>unless</x-color></bold> (looking-at org-heading-regexp)
          (re-search-backward org-heading-regexp))
        (org-shiftleft))
    (org-shiftleft)))


(<bold><x-color><param>#859900</param>defun</x-color></bold> <x-color><param>#268bd2</param>org-init--open-in-dired</x-color> ()
  (<bold><x-color><param>#859900</param>interactive</x-color></bold>)
  (<bold><x-color><param>#859900</param>if</x-color></bold> (org-init--package-section-p)
      (<bold><x-color><param>#859900</param>save-excursion</x-color></bold>
        (beginning-of-line)
        (<bold><x-color><param>#859900</param>unless</x-color></bold> (looking-at org-heading-regexp)
          (re-search-backward org-heading-regexp))
        (<bold><x-color><param>#859900</param>let</x-color></bold> ((elpa (expand-file-name <x-color><param>#2aa198</param>"elpa"</x-color> user-emacs-directory))
              start pkgname pkdir)
          (search-forward <x-color><param>#2aa198</param>"[ "</x-color> (line-end-position) t)
          (<bold><x-color><param>#859900</param>if</x-color></bold> (search-forward <x-color><param>#2aa198</param>"none"</x-color> (line-end-position) t)
              (dired (expand-file-name <x-color><param>#2aa198</param>"lisp/"</x-color> user-emacs-directory) pkdir)
            (<bold><x-color><param>#859900</param>progn</x-color></bold>
              (beginning-of-line)
              (<bold><x-color><param>#859900</param>while</x-color></bold> (search-forward <x-color><param>#2aa198</param>"] "</x-color> (line-end-position) t) )
              (<bold><x-color><param>#859900</param>setq</x-color></bold> start (point))
              (skip-chars-forward <x-color><param>#2aa198</param>"[a-zA-Z\\-]"</x-color>)
              (<bold><x-color><param>#859900</param>setq</x-color></bold> pkgname (buffer-substring-no-properties start (point)))
              (<bold><x-color><param>#859900</param>setq</x-color></bold> pkdir (directory-files elpa t pkgname t ))
              (<bold><x-color><param>#859900</param>if</x-color></bold> pkdir (dired (car pkdir)))))))))


(<bold><x-color><param>#859900</param>defun</x-color></bold> <x-color><param>#268bd2</param>org-init--sort-packages</x-color> ()
  <x-color><param>#2aa198</param>"This is just a convenience wrapper for org-sort. It does reverted sort on
          todo keywords-"</x-color>
  (<bold><x-color><param>#859900</param>interactive</x-color></bold>)
  (<bold><x-color><param>#859900</param>save-excursion</x-color></bold>
    (goto-char (org-init--packages))
    (org-sort-entries nil ?a) <x-color><param>#586e75</param>;; first sort alphabetic than in reversed todo-order
</x-color>    (org-sort-entries nil ?O)
    (org-cycle) (org-cycle)))


(<bold><x-color><param>#859900</param>defun</x-color></bold> <x-color><param>#268bd2</param>org-init--goto-package</x-color> ()
  (<bold><x-color><param>#859900</param>interactive</x-color></bold>)
  (<bold><x-color><param>#859900</param>let</x-color></bold> ((org-goto-interface 'outline-path-completionp)
        (org-outline-path-complete-in-steps nil))
    (org-goto)))


(<bold><x-color><param>#859900</param>defvar</x-color></bold> <x-color><param>#268bd2</param>org-init-mode-map</x-color>
  (<bold><x-color><param>#859900</param>let</x-color></bold> ((map (make-sparse-keymap)))
    (define-key org-mode-map [remap org-shiftup] #'org-init--shiftup)
    (define-key org-mode-map [remap org-shiftdown] #'org-init--shiftdown)
    (define-key org-mode-map [remap org-shiftleft] #'org-init--shiftleft)
    (define-key org-mode-map [remap org-shiftright] #'org-init--shiftright)
    (define-key map (kbd <x-color><param>#2aa198</param>"C-c i a"</x-color>) 'add-package)
    (define-key map (kbd <x-color><param>#2aa198</param>"C-c i i"</x-color>) 'install-packages)
    (define-key map (kbd <x-color><param>#2aa198</param>"C-c i p"</x-color>) 'add-pseudo-package)
    (define-key map (kbd <x-color><param>#2aa198</param>"C-c i g"</x-color>) 'generate-init-files)
    (define-key map (kbd <x-color><param>#2aa198</param>"C-c i j"</x-color>) 'org-init--goto-package)
    (define-key map (kbd <x-color><param>#2aa198</param>"C-c C-j"</x-color>) 'org-init--open-in-dired)
    (define-key map (kbd <x-color><param>#2aa198</param>"C-c i s"</x-color>) 'org-init--sort-packages)
    (define-key map (kbd <x-color><param>#2aa198</param>"C-c i u"</x-color>) 'org-init-update-packages)
    map)
  <x-color><param>#2aa198</param>"Keymap used in `<bold><x-color><param>#268bd2</param>org-init-mode</x-color></bold>'."</x-color>)


(<bold><x-color><param>#859900</param>defvar</x-color></bold> <x-color><param>#268bd2</param>org-init-mode-enabled</x-color> nil)
(<bold><x-color><param>#859900</param>defvar</x-color></bold> <x-color><param>#268bd2</param>org-init-old-kwds</x-color> nil)
(<bold><x-color><param>#859900</param>defvar</x-color></bold> <x-color><param>#268bd2</param>org-init-old-key-alist</x-color> nil)
(<bold><x-color><param>#859900</param>defvar</x-color></bold> <x-color><param>#268bd2</param>org-init-old-kwd-alist</x-color> nil)
(<bold><x-color><param>#859900</param>defvar</x-color></bold> <x-color><param>#268bd2</param>org-init-old-log-done</x-color> nil)
(<bold><x-color><param>#859900</param>defvar</x-color></bold> <x-color><param>#268bd2</param>org-init-old-todo</x-color> nil)

(<bold><x-color><param>#859900</param>setq</x-color></bold> org-init-mode-enabled nil org-init-old-kwds nil org-init-old-key-alist nil
      org-init-old-kwd-alist nil org-init-old-log-done nil org-init-old-todo nil)

(make-variable-buffer-local 'org-log-done)
(make-variable-buffer-local 'org-todo-keywords)


(<bold><x-color><param>#859900</param>defun</x-color></bold> <x-color><param>#268bd2</param>org-init--longest-str</x-color> (lst)
  (<bold><x-color><param>#859900</param>let</x-color></bold> ((len 0) l)
    (<bold><x-color><param>#859900</param>dolist</x-color></bold> (elt lst)
      (<bold><x-color><param>#859900</param>setq</x-color></bold> l (length elt))
      (<bold><x-color><param>#859900</param>when</x-color></bold> (<bold><x-color><param>#859900</param>lt</x-color></bold> len l)
        (<bold><x-color><param>#859900</param>setq</x-color></bold> len l)))
    len))


(<bold><x-color><param>#859900</param>defun</x-color></bold> <x-color><param>#268bd2</param>org-init--initial-outline</x-color> ()
  (<bold><x-color><param>#859900</param>save-excursion</x-color></bold>
    (goto-char (point-min))
    (re-search-forward <x-color><param>#2aa198</param>"^\\* About"</x-color>)
    (hide-subtree)
    (re-search-forward <x-color><param>#2aa198</param>"^\\* Generator"</x-color>)
    (hide-subtree)
    (re-search-forward <x-color><param>#2aa198</param>"^\\* Packages"</x-color>)
    (hide-subtree)
    (show-children)))


(<bold><x-color><param>#859900</param>defun</x-color></bold> <x-color><param>#268bd2</param>org-todo-per-file-keywords</x-color> (kwds)
  <x-color><param>#2aa198</param>"Sets per file </x-color><bold>TODO</bold><x-color><param>#2aa198</param> labels. Takes as argument a list of strings to be
                  used as labels."</x-color>
  (<bold><x-color><param>#859900</param>let</x-color></bold> (alist)
    (<bold><x-color><param>#859900</param>push</x-color></bold> <x-color><param>#2aa198</param>"</x-color><bold>TODO</bold><x-color><param>#2aa198</param>"</x-color> alist)
    (<bold><x-color><param>#859900</param>dolist</x-color></bold> (kwd kwds)
      (<bold><x-color><param>#859900</param>push</x-color></bold> kwd alist))
    (<bold><x-color><param>#859900</param>setq</x-color></bold> alist (list (nreverse alist)))
    <x-color><param>#586e75</param>;; </x-color><bold>TODO</bold><x-color><param>#586e75</param> keywords.
</x-color>    (<bold><x-color><param>#859900</param>setq-local</x-color></bold> org-todo-kwd-alist nil)
    (<bold><x-color><param>#859900</param>setq-local</x-color></bold> org-todo-key-alist nil)
    (<bold><x-color><param>#859900</param>setq-local</x-color></bold> org-todo-key-trigger nil)
    (<bold><x-color><param>#859900</param>setq-local</x-color></bold> org-todo-keywords-1 nil)
    (<bold><x-color><param>#859900</param>setq-local</x-color></bold> org-done-keywords nil)
    (<bold><x-color><param>#859900</param>setq-local</x-color></bold> org-todo-heads nil)
    (<bold><x-color><param>#859900</param>setq-local</x-color></bold> org-todo-sets nil)
    (<bold><x-color><param>#859900</param>setq-local</x-color></bold> org-todo-log-states nil)
    (<bold><x-color><param>#859900</param>let</x-color></bold> ((todo-sequences alist))
      (<bold><x-color><param>#859900</param>dolist</x-color></bold> (sequence todo-sequences)
        (<bold><x-color><param>#859900</param>let*</x-color></bold> ((sequence (<bold><x-color><param>#859900</param>or</x-color></bold> (run-hook-with-args-until-success
                              'org-todo-setup-filter-hook sequence)
                             sequence))
               (sequence-type (car sequence))
               (keywords (cdr sequence))
               (sep (member <x-color><param>#2aa198</param>"|"</x-color> keywords))
               names alist)
          (<bold><x-color><param>#859900</param>dolist</x-color></bold> (k (remove <x-color><param>#2aa198</param>"|"</x-color> keywords))
            (<bold><x-color><param>#859900</param>unless</x-color></bold> (string-match <x-color><param>#2aa198</param>"^<bold><x-color><param>#859900</param>\\</x-color><x-color><param>#b58900</param>(</x-color></bold>.*?<bold><x-color><param>#859900</param>\\</x-color><x-color><param>#b58900</param>)</x-color><x-color><param>#859900</param>\\</x-color><x-color><param>#b58900</param>(?:</x-color></bold>(<bold><x-color><param>#859900</param>\\</x-color><x-color><param>#b58900</param>(</x-color></bold>[<bold><x-color><param>#b58900</param>^</x-color></bold>!@/]<bold><x-color><param>#859900</param>\\</x-color><x-color><param>#b58900</param>)</x-color></bold>?.*?)<bold><x-color><param>#859900</param>\\</x-color><x-color><param>#b58900</param>)</x-color></bold>?$"</x-color>
                                  k)
              (<bold>error</bold> <x-color><param>#2aa198</param>"Invalid </x-color><bold>TODO</bold><x-color><param>#2aa198</param> keyword %s"</x-color> k))
            (<bold><x-color><param>#859900</param>let</x-color></bold> ((name (match-string 1 k))
                  (key (match-string 2 k))
                  (log (org-extract-log-state-settings k)))
              (<bold><x-color><param>#859900</param>push</x-color></bold> name names)
              (<bold><x-color><param>#859900</param>push</x-color></bold> (cons name (<bold><x-color><param>#859900</param>and</x-color></bold> key (string-to-char key))) alist)
              (<bold><x-color><param>#859900</param>when</x-color></bold> log (<bold><x-color><param>#859900</param>push</x-color></bold> log org-todo-log-states))))
          (<bold><x-color><param>#859900</param>let*</x-color></bold> ((names (nreverse names))
                 (done (<bold><x-color><param>#859900</param>if</x-color></bold> sep (org-remove-keyword-keys (cdr sep))
                         (last names)))
                 (head (car names))
                 (tail (list sequence-type head (car done) (org-last done))))
            (add-to-list 'org-todo-heads head 'append)
            (<bold><x-color><param>#859900</param>push</x-color></bold> names org-todo-sets)
            (<bold><x-color><param>#859900</param>setq</x-color></bold> org-done-keywords (append org-done-keywords done nil))
            (<bold><x-color><param>#859900</param>setq</x-color></bold> org-todo-keywords-1 (append org-todo-keywords-1 names nil))
            (<bold><x-color><param>#859900</param>setq</x-color></bold> org-todo-key-alist
                  (append org-todo-key-alist
                          (<bold><x-color><param>#859900</param>and</x-color></bold> alist
                               (append '((<bold><x-color><param>#839496</param>:startgroup</x-color></bold>))
                                       (nreverse alist)
                                       '((<bold><x-color><param>#839496</param>:endgroup</x-color></bold>))))))
            (<bold><x-color><param>#859900</param>dolist</x-color></bold> (k names) (<bold><x-color><param>#859900</param>push</x-color></bold> (cons k tail) org-todo-kwd-alist))))))
    (<bold><x-color><param>#859900</param>setq</x-color></bold> org-todo-sets (nreverse org-todo-sets)
          org-todo-kwd-alist (nreverse org-todo-kwd-alist)
          org-todo-key-trigger (delq nil (mapcar #'cdr org-todo-key-alist))
          org-todo-key-alist (org-assign-fast-keys org-todo-key-alist))
    <x-color><param>#586e75</param>;; Compute the regular expressions and other local variables.
</x-color>    <x-color><param>#586e75</param>;; Using `<bold><x-color><param>#268bd2</param>org-outline-regexp-bol</x-color></bold>' would complicate them much,
</x-color>    <x-color><param>#586e75</param>;; because of the fixed white space at the end of that string.
</x-color>    (<bold><x-color><param>#859900</param>unless</x-color></bold> org-done-keywords
      (<bold><x-color><param>#859900</param>setq</x-color></bold> org-done-keywords
            (<bold><x-color><param>#859900</param>and</x-color></bold> org-todo-keywords-1 (last org-todo-keywords-1))))
    (<bold><x-color><param>#859900</param>setq</x-color></bold> org-not-done-keywords
          (org-delete-all org-done-keywords
                          (copy-sequence org-todo-keywords-1))
          org-todo-regexp (regexp-opt org-todo-keywords-1 t)
          org-not-done-regexp (regexp-opt org-not-done-keywords t)
          org-not-done-heading-regexp
          (format org-heading-keyword-regexp-format org-not-done-regexp)
          org-todo-line-regexp
          (format org-heading-keyword-maybe-regexp-format org-todo-regexp)
          org-complex-heading-regexp
          (concat <x-color><param>#2aa198</param>"^<bold><x-color><param>#859900</param>\\</x-color><x-color><param>#b58900</param>(</x-color></bold>\\*+<bold><x-color><param>#859900</param>\\</x-color><x-color><param>#b58900</param>)</x-color></bold>"</x-color>
                  <x-color><param>#2aa198</param>"<bold><x-color><param>#859900</param>\\</x-color><x-color><param>#b58900</param>(?:</x-color></bold> +"</x-color> org-todo-regexp <x-color><param>#2aa198</param>"<bold><x-color><param>#859900</param>\\</x-color><x-color><param>#b58900</param>)</x-color></bold>?"</x-color>
                  <x-color><param>#2aa198</param>"<bold><x-color><param>#859900</param>\\</x-color><x-color><param>#b58900</param>(?:</x-color></bold> +<bold><x-color><param>#859900</param>\\</x-color><x-color><param>#b58900</param>(</x-color></bold>\\[#.\\]<bold><x-color><param>#859900</param>\\</x-color><x-color><param>#b58900</param>)</x-color><x-color><param>#859900</param>\\</x-color><x-color><param>#b58900</param>)</x-color></bold>?"</x-color>
                  <x-color><param>#2aa198</param>"<bold><x-color><param>#859900</param>\\</x-color><x-color><param>#b58900</param>(?:</x-color></bold> +<bold><x-color><param>#859900</param>\\</x-color><x-color><param>#b58900</param>(</x-color></bold>.*?<bold><x-color><param>#859900</param>\\</x-color><x-color><param>#b58900</param>)</x-color><x-color><param>#859900</param>\\</x-color><x-color><param>#b58900</param>)</x-color></bold>??"</x-color>
                  <x-color><param>#2aa198</param>"<bold><x-color><param>#859900</param>\\</x-color><x-color><param>#b58900</param>(?:</x-color></bold>[ \t]+<bold><x-color><param>#859900</param>\\</x-color><x-color><param>#b58900</param>(</x-color></bold>:[[:alnum:]_@#%:]+:<bold><x-color><param>#859900</param>\\</x-color><x-color><param>#b58900</param>)</x-color><x-color><param>#859900</param>\\</x-color><x-color><param>#b58900</param>)</x-color></bold>?"</x-color>
                  <x-color><param>#2aa198</param>"[ \t]*$"</x-color>)
          org-complex-heading-regexp-format
          (concat <x-color><param>#2aa198</param>"^<bold><x-color><param>#859900</param>\\</x-color><x-color><param>#b58900</param>(</x-color></bold>\\*+<bold><x-color><param>#859900</param>\\</x-color><x-color><param>#b58900</param>)</x-color></bold>"</x-color>
                  <x-color><param>#2aa198</param>"<bold><x-color><param>#859900</param>\\</x-color><x-color><param>#b58900</param>(?:</x-color></bold> +"</x-color> org-todo-regexp <x-color><param>#2aa198</param>"<bold><x-color><param>#859900</param>\\</x-color><x-color><param>#b58900</param>)</x-color></bold>?"</x-color>
                  <x-color><param>#2aa198</param>"<bold><x-color><param>#859900</param>\\</x-color><x-color><param>#b58900</param>(?:</x-color></bold> +<bold><x-color><param>#859900</param>\\</x-color><x-color><param>#b58900</param>(</x-color></bold>\\[#.\\]<bold><x-color><param>#859900</param>\\</x-color><x-color><param>#b58900</param>)</x-color><x-color><param>#859900</param>\\</x-color><x-color><param>#b58900</param>)</x-color></bold>?"</x-color>
                  <x-color><param>#2aa198</param>"<bold><x-color><param>#859900</param>\\</x-color><x-color><param>#b58900</param>(?:</x-color></bold> +"</x-color>
                  <x-color><param>#586e75</param>;; Stats cookies can be stuck to body.
</x-color>                  <x-color><param>#2aa198</param>"<bold><x-color><param>#859900</param>\\</x-color><x-color><param>#b58900</param>(?:</x-color></bold>\\[[0-9%%/]+\\] *<bold><x-color><param>#859900</param>\\</x-color><x-color><param>#b58900</param>)</x-color></bold>*"</x-color>
                  <x-color><param>#2aa198</param>"<bold><x-color><param>#859900</param>\\</x-color><x-color><param>#b58900</param>(</x-color></bold>%s<bold><x-color><param>#859900</param>\\</x-color><x-color><param>#b58900</param>)</x-color></bold>"</x-color>
                  <x-color><param>#2aa198</param>"<bold><x-color><param>#859900</param>\\</x-color><x-color><param>#b58900</param>(?:</x-color></bold> *\\[[0-9%%/]+\\]<bold><x-color><param>#859900</param>\\</x-color><x-color><param>#b58900</param>)</x-color></bold>*"</x-color>
                  <x-color><param>#2aa198</param>"<bold><x-color><param>#859900</param>\\</x-color><x-color><param>#b58900</param>)</x-color></bold>"</x-color>
                  <x-color><param>#2aa198</param>"<bold><x-color><param>#859900</param>\\</x-color><x-color><param>#b58900</param>(?:</x-color></bold>[ \t]+<bold><x-color><param>#859900</param>\\</x-color><x-color><param>#b58900</param>(</x-color></bold>:[[:alnum:]_@#%%:]+:<bold><x-color><param>#859900</param>\\</x-color><x-color><param>#b58900</param>)</x-color><x-color><param>#859900</param>\\</x-color><x-color><param>#b58900</param>)</x-color></bold>?"</x-color>
                  <x-color><param>#2aa198</param>"[ \t]*$"</x-color>)
          org-todo-line-tags-regexp
          (concat <x-color><param>#2aa198</param>"^<bold><x-color><param>#859900</param>\\</x-color><x-color><param>#b58900</param>(</x-color></bold>\\*+<bold><x-color><param>#859900</param>\\</x-color><x-color><param>#b58900</param>)</x-color></bold>"</x-color>
                  <x-color><param>#2aa198</param>"<bold><x-color><param>#859900</param>\\</x-color><x-color><param>#b58900</param>(?:</x-color></bold> +"</x-color> org-todo-regexp <x-color><param>#2aa198</param>"<bold><x-color><param>#859900</param>\\</x-color><x-color><param>#b58900</param>)</x-color></bold>?"</x-color>
                  <x-color><param>#2aa198</param>"<bold><x-color><param>#859900</param>\\</x-color><x-color><param>#b58900</param>(?:</x-color></bold> +<bold><x-color><param>#859900</param>\\</x-color><x-color><param>#b58900</param>(</x-color></bold>.*?<bold><x-color><param>#859900</param>\\</x-color><x-color><param>#b58900</param>)</x-color><x-color><param>#859900</param>\\</x-color><x-color><param>#b58900</param>)</x-color></bold>??"</x-color>
                  <x-color><param>#2aa198</param>"<bold><x-color><param>#859900</param>\\</x-color><x-color><param>#b58900</param>(?:</x-color></bold>[ \t]+<bold><x-color><param>#859900</param>\\</x-color><x-color><param>#b58900</param>(</x-color></bold>:[[:alnum:]:_@#%]+:<bold><x-color><param>#859900</param>\\</x-color><x-color><param>#b58900</param>)</x-color><x-color><param>#859900</param>\\</x-color><x-color><param>#b58900</param>)</x-color></bold>?"</x-color>
                  <x-color><param>#2aa198</param>"[ \t]*$"</x-color>))))


(<bold><x-color><param>#859900</param>push</x-color></bold> <x-color><param>#2aa198</param>"GIT"</x-color> org-element-affiliated-keywords)

<x-color><param>#586e75</param>;; from J. Kitchin:
;; https://kitchingroup.cheme.cmu.edu/blog/2017/06/10/Adding-keymaps-to-src-blocks-via-org-font-lock-hook/
</x-color>(<bold><x-color><param>#859900</param>require</x-color></bold> '<bold><x-color><param>#268bd2</param>org-mouse</x-color></bold>)
(<bold><x-color><param>#859900</param>require</x-color></bold> '<bold><x-color><param>#268bd2</param>elisp-mode</x-color></bold>)


(<bold><x-color><param>#859900</param>defun</x-color></bold> <x-color><param>#268bd2</param>scimax-spoof-mode</x-color> (orig-func <x-color><param>#b58900</param>&rest</x-color> args)
  <x-color><param>#2aa198</param>"Advice function to spoof commands in org-mode src blocks.
        It is for commands that depend on the major mode. One example is
        `<bold><x-color><param>#268bd2</param>lispy--eval</x-color></bold>'."</x-color>
  (<bold><x-color><param>#859900</param>if</x-color></bold> (org-in-src-block-p)
      (<bold><x-color><param>#859900</param>let</x-color></bold> ((major-mode (intern (format <x-color><param>#2aa198</param>"%s-mode"</x-color>
                                        (first (org-babel-get-src-block-info))))))
        (apply orig-func args))
    (apply orig-func args)))


(<bold><x-color><param>#859900</param>defvar</x-color></bold> <x-color><param>#268bd2</param>scimax-src-block-keymaps</x-color>
  `((<x-color><param>#2aa198</param>"emacs-lisp"</x-color>
     .
     ,(<bold><x-color><param>#859900</param>let</x-color></bold> ((map (make-composed-keymap
                  `(,emacs-lisp-mode-map ,org-init-mode-map)
                  org-mode-map)))
        (define-key map (kbd <x-color><param>#2aa198</param>"C-c C-c"</x-color>) 'org-ctrl-c-ctrl-c)
        map))))


(<bold><x-color><param>#859900</param>defun</x-color></bold> <x-color><param>#268bd2</param>scimax-add-keymap-to-src-blocks</x-color> (limit)
  <x-color><param>#2aa198</param>"Add keymaps to src-blocks defined in `<bold><x-color><param>#268bd2</param>scimax-src-block-keymaps</x-color></bold>'."</x-color>
  (<bold><x-color><param>#859900</param>let</x-color></bold> ((case-fold-search t)
        lang)
    (<bold><x-color><param>#859900</param>while</x-color></bold> (re-search-forward org-babel-src-block-regexp limit t)
      (<bold><x-color><param>#859900</param>let</x-color></bold> ((lang (match-string 2))
            (beg (match-beginning 0))
            (end (match-end 0)))
        (<bold><x-color><param>#859900</param>if</x-color></bold> (assoc (org-no-properties lang) scimax-src-block-keymaps)
            (<bold><x-color><param>#859900</param>progn</x-color></bold>
              (add-text-properties
               beg end `(local-map ,(cdr (assoc
                                          (org-no-properties lang)
                                          scimax-src-block-keymaps))))
              (add-text-properties
               beg end `(cursor-sensor-functions
                         ((<bold><x-color><param>#859900</param>lambda</x-color></bold> (win prev-pos sym)
                            <x-color><param>#586e75</param>;; This simulates a mouse click and makes a menu change
</x-color>                            (org-mouse-down-mouse nil)))))))))))


(<bold><x-color><param>#859900</param>define-minor-mode</x-color></bold> <x-color><param>#268bd2</param>org-init-mode</x-color> <x-color><param>#2aa198</param>""</x-color>
  <bold><x-color><param>#839496</param>:global</x-color></bold> nil <bold><x-color><param>#839496</param>:lighter</x-color></bold> <x-color><param>#2aa198</param>" init-file"</x-color>
  (<bold><x-color><param>#859900</param>unless</x-color></bold> (derived-mode-p 'org-mode)
    (<bold>error</bold> <x-color><param>#2aa198</param>"Not in org-mode."</x-color>))
  (<bold><x-color><param>#859900</param>cond</x-color></bold> (org-init-mode
         (<bold><x-color><param>#859900</param>unless</x-color></bold> org-init-mode-enabled
           (<bold><x-color><param>#859900</param>setq</x-color></bold> org-init-mode-enabled t
                 org-init-old-log-done org-log-done
                 org-init-old-kwds org-todo-keywords-1
                 org-init-old-key-alist org-todo-key-alist
                 org-init-old-kwd-alist org-todo-kwd-alist)
           (<bold><x-color><param>#859900</param>setq-local</x-color></bold> org-log-done nil)
           (<bold><x-color><param>#859900</param>let</x-color></bold> (s kwdlist templist l)
             (<bold><x-color><param>#859900</param>dolist</x-color></bold> (repo package-archives)
               (<bold><x-color><param>#859900</param>push</x-color></bold> (car repo) templist))
             (<bold><x-color><param>#859900</param>push</x-color></bold> <x-color><param>#2aa198</param>"none"</x-color> templist)
             (<bold><x-color><param>#859900</param>setq</x-color></bold> l (org-init--longest-str templist))
             (<bold><x-color><param>#859900</param>dolist</x-color></bold> (s templist)
               (<bold><x-color><param>#859900</param>while</x-color></bold> (<bold><x-color><param>#859900</param>lt</x-color></bold> (length s) l)
                 (<bold><x-color><param>#859900</param>setq</x-color></bold> s (concat s <x-color><param>#2aa198</param>" "</x-color>)))
               (<bold><x-color><param>#859900</param>push</x-color></bold> (concat <x-color><param>#2aa198</param>"[ "</x-color> s <x-color><param>#2aa198</param>" ]"</x-color>) kwdlist))
             (org-todo-per-file-keywords (nreverse kwdlist))))
         (add-hook 'org-font-lock-hook #'scimax-add-keymap-to-src-blocks t)
         (add-to-list 'font-lock-extra-managed-props 'local-map)
         (add-to-list 'font-lock-extra-managed-props 'cursor-sensor-functions)
         <x-color><param>#586e75</param>;;(advice-add 'lispy--eval :around 'scimax-spoof-mode)
</x-color>         (cursor-sensor-mode +1)
         (eldoc-mode +1)
         (company-mode +1))
        (t
         (remove-hook 'org-font-lock-hook #'scimax-add-keymap-to-src-blocks)
         <x-color><param>#586e75</param>;;(advice-remove 'lispy--eval 'scimax-spoof-mode)
</x-color>         (cursor-sensor-mode -1)
         (<bold><x-color><param>#859900</param>setq</x-color></bold> org-todo-keywords-1 org-init-old-kwds
               org-todo-key-alist org-init-old-key-alist
               org-todo-kwd-alist org-init-old-kwd-alist
               org-log-done org-init-old-log-done
               org-init-mode-enabled nil)))
  (font-lock-fontify-buffer))


(org-init--initial-outline)
(org-init-mode +1)
#+end_src
<x-color><param>#cb4b16</param>* Packages</x-color>

<x-color><param>#002b36</param>*</x-color><x-color><param>#859900</param>* [x] htmlize</x-color>
#+begin_src emacs-lisp

#+end_src


<x-color><param>#002b36</param>*</x-color><x-color><param>#859900</param>* [x] lsp-java</x-color>
#+begin_src emacs-lisp

#+end_src


<x-color><param>#002b36</param>*</x-color><x-color><param>#859900</param>* [ local ] [ ] emacs-vision</x-color>
#+begin_src emacs-lisp
(<bold><x-color><param>#859900</param>with-eval-after-load</x-color></bold> 'emacs-vision
  (load <x-color><param>#2aa198</param>"~/apikeys"</x-color>))
#+end_src
<x-color><param>#002b36</param>*</x-color><x-color><param>#859900</param>* [ local ] [x] dired-auto-readme</x-color>
#+begin_src emacs-lisp
(<bold><x-color><param>#859900</param>with-hook</x-color></bold> dired-auto-readme-mode (diminish 'dired-auto-readme-mode))
#+end_src

<x-color><param>#002b36</param>*</x-color><x-color><param>#859900</param>* [ local ] [x] helper</x-color>
#+begin_src emacs-lisp

#+end_src

<x-color><param>#002b36</param>*</x-color><x-color><param>#859900</param>* [ local ] [x] magit-gh-comments</x-color>
#+begin_src emacs-lisp

#+end_src

<x-color><param>#002b36</param>*</x-color><x-color><param>#859900</param>* [ local ] [x] peep-dired</x-color>
#+begin_src emacs-lisp

#+end_src
<x-color><param>#002b36</param>*</x-color><x-color><param>#859900</param>* [ ] doc-show-inline</x-color>
#+begin_src emacs-lisp
(<bold><x-color><param>#859900</param>with-package</x-color></bold> doc-show-inline
              (<bold><x-color><param>#859900</param>defkeys</x-color></bold> c-mode-map
                       <x-color><param>#2aa198</param>"C-;"</x-color> doc-show-inline-mode)
              (<bold><x-color><param>#859900</param>defkeys</x-color></bold> c++-mode-map
                       <x-color><param>#2aa198</param>"C-;"</x-color> doc-show-inline-mode))
(<bold><x-color><param>#859900</param>with-hook</x-color></bold> c-mode (doc-show-inline-mode +1))
(<bold><x-color><param>#859900</param>with-hook</x-color></bold> c++-mode (doc-show-inline-mode +1))
#+end_src
<x-color><param>#002b36</param>*</x-color><x-color><param>#859900</param>* [x] academic-phrases</x-color>
#+begin_src emacs-lisp

#+end_src
<x-color><param>#002b36</param>*</x-color><x-color><param>#859900</param>* [x] ace-window</x-color>
#+begin_src emacs-lisp
  (<bold><x-color><param>#859900</param>with-package</x-color></bold> ace-window
                (ace-window-display-mode 1)
                <x-color><param>#586e75</param>;;(setq aw-dispatch-always t)
</x-color>                (<bold><x-color><param>#859900</param>setq</x-color></bold> aw-keys '(?a ?s ?d ?f ?g ?h ?j ?k ?l)))
#+end_src
<x-color><param>#002b36</param>*</x-color><x-color><param>#859900</param>* [x] aggressive-indent</x-color>
#+begin_src emacs-lisp

#+end_src
<x-color><param>#002b36</param>*</x-color><x-color><param>#859900</param>* [x] all-the-icons</x-color>
#+begin_src emacs-lisp
  (<bold><x-color><param>#859900</param>with-package</x-color></bold> all-the-icons
                (diminish 'all-the-icons-mode)
                (<bold><x-color><param>#859900</param>setq</x-color></bold> neo-theme 'arrow)
                (<bold><x-color><param>#859900</param>setq</x-color></bold> neo-window-fixed-size nil))
#+end_src
<x-color><param>#002b36</param>*</x-color><x-color><param>#859900</param>* [x] anaphora</x-color>
#+begin_src emacs-lisp

#+end_src
<x-color><param>#002b36</param>*</x-color><x-color><param>#859900</param>* [x] ascii-art-to-unicode</x-color>
#+begin_src emacs-lisp

#+end_src

<x-color><param>#002b36</param>*</x-color><x-color><param>#859900</param>* [x] ascii-table</x-color>
#+begin_src emacs-lisp

#+end_src

<x-color><param>#002b36</param>*</x-color><x-color><param>#859900</param>* [x] async</x-color>
#+begin_src emacs-lisp
(<bold><x-color><param>#859900</param>with-package</x-color></bold> async (async-bytecomp-package-mode 1))
(<bold><x-color><param>#859900</param>with-hook</x-color></bold> dired-async-mode (diminish 'dired-async-mode))
#+end_src
<x-color><param>#002b36</param>*</x-color><x-color><param>#859900</param>* [x] auto-yasnippet</x-color>
#+begin_src emacs-lisp

#+end_src
<x-color><param>#002b36</param>*</x-color><x-color><param>#859900</param>* [x] avy</x-color>
#+BEGIN_SRC emacs-lisp

#+END_SRC
<x-color><param>#002b36</param>*</x-color><x-color><param>#859900</param>* [x] beacon</x-color>
#+begin_src emacs-lisp
(<bold><x-color><param>#859900</param>with-hook</x-color></bold> after-init (<bold><x-color><param>#859900</param>when-idle</x-color></bold> (beacon-mode t)))
(<bold><x-color><param>#859900</param>with-hook</x-color></bold> beacon-mode (diminish 'beacon-mode))
#+end_src
<x-color><param>#002b36</param>*</x-color><x-color><param>#859900</param>* [x] blamer</x-color>
#+begin_src emacs-lisp

#+end_src


<x-color><param>#002b36</param>*</x-color><x-color><param>#859900</param>* [x] borg</x-color>
#+begin_src emacs-lisp

#+end_src
<x-color><param>#002b36</param>*</x-color><x-color><param>#859900</param>* [x] bug-hunter</x-color>
#+begin_src emacs-lisp

#+end_src
<x-color><param>#002b36</param>*</x-color><x-color><param>#859900</param>* [x] bui</x-color>
#+begin_src emacs-lisp

#+end_src
<x-color><param>#002b36</param>*</x-color><x-color><param>#859900</param>* [x] cfrs</x-color>
#+begin_src emacs-lisp

#+end_src
<x-color><param>#002b36</param>*</x-color><x-color><param>#859900</param>* [x] checkdoc</x-color>
#+begin_src emacs-lisp

#+end_src

<x-color><param>#002b36</param>*</x-color><x-color><param>#859900</param>* [x] cider</x-color>
#+begin_src emacs-lisp

#+end_src
<x-color><param>#002b36</param>*</x-color><x-color><param>#859900</param>* [x] cmake-font-lock</x-color>
#+begin_src emacs-lisp
  (<bold><x-color><param>#859900</param>with-hook</x-color></bold> prog-mode
             <x-color><param>#586e75</param>;; Highlighting in cmake-mode this way interferes with
</x-color>             <x-color><param>#586e75</param>;; cmake-font-lock, which is something I dont yet understand.
</x-color>             (<bold><x-color><param>#859900</param>when</x-color></bold> (not (derived-mode-p 'cmake-mode))
               (font-lock-add-keywords nil
                                       '((<x-color><param>#2aa198</param>"\\<<<bold><x-color><param>#859900</param>\\</x-color><x-color><param>#b58900</param>(</x-color></bold></x-color><bold>FIXME<x-color><param>#2aa198</param><x-color><param>#859900</param>\\</x-color><x-color><param>#b58900</param>|</x-color></x-color>TODO<x-color><param>#2aa198</param><x-color><param>#859900</param>\\</x-color><x-color><param>#b58900</param>|</x-color></x-color>BUG<x-color><param>#2aa198</param><x-color><param>#859900</param>\\</x-color><x-color><param>#b58900</param>|</x-color></x-color>DONE<x-color><param>#2aa198</param><x-color><param>#859900</param>\\</x-color><x-color><param>#b58900</param>)</x-color></x-color></bold><x-color><param>#2aa198</param>"</x-color>
                                          1 font-lock-warning-face t)))))

  (<bold><x-color><param>#859900</param>with-hook</x-color></bold> cmake-mode
             (cmake-font-lock-activate))
#+end_src
<x-color><param>#002b36</param>*</x-color><x-color><param>#859900</param>* [x] cmake-mode</x-color>
#+begin_src emacs-lisp
  (<bold><x-color><param>#859900</param>with-hook</x-color></bold> after-init
             (add-to-list 'auto-mode-alist '(<x-color><param>#2aa198</param>"\\.cmake\\'"</x-color> . cmake-mode))
             (add-to-list 'auto-mode-alist '(<x-color><param>#2aa198</param>"\\CMakeLists.txt\\'"</x-color> . cmake-mode)))
  (<bold><x-color><param>#859900</param>with-hook</x-color></bold> cmake
             (<bold><x-color><param>#859900</param>require</x-color></bold> '<bold><x-color><param>#268bd2</param>company</x-color></bold>)
             (<bold><x-color><param>#859900</param>require</x-color></bold> '<bold><x-color><param>#268bd2</param>company-cmake</x-color></bold>)
             (company-mode 1))
#+end_src
<x-color><param>#002b36</param>*</x-color><x-color><param>#859900</param>* [x] company</x-color>
#+begin_src emacs-lisp
  (<bold><x-color><param>#859900</param>with-hook</x-color></bold> after-init
             (add-hook 'c-mode-common-hook 'company-mode)
             (add-hook 'sgml-mode-hook 'company-mode)
             (add-hook 'emacs-lisp-mode-hook 'company-mode)
             (add-hook 'text-mode-hook 'company-mode)
             (add-hook 'lisp-mode-hook 'company-mode)
             (<bold><x-color><param>#859900</param>when-idle</x-color></bold>
              (<bold><x-color><param>#859900</param>require</x-color></bold> '<bold><x-color><param>#268bd2</param>company</x-color></bold>)))

  (<bold><x-color><param>#859900</param>with-package</x-color></bold> company 
                (<bold><x-color><param>#859900</param>require</x-color></bold> '<bold><x-color><param>#268bd2</param>company-capf</x-color></bold>)
                (<bold><x-color><param>#859900</param>require</x-color></bold> '<bold><x-color><param>#268bd2</param>company-files</x-color></bold>)
              
                (diminish 'company-mode)
                (<bold><x-color><param>#859900</param>setq</x-color></bold> company-idle-delay            0.0
                      company-require-match         nil
                      company-minimum-prefix-length 2
                      company-show-quick-access     t
                      company-tooltip-limit         20
                      company-async-timeout         6
                      company-dabbrev-downcase      nil
                      tab-always-indent 'complete
                      company-global-modes '(not term-mode)
                      company-backends (delete 'company-semantic
                                               company-backends))
              
                (<bold><x-color><param>#859900</param>setq</x-color></bold> company-backends '(company-capf
                                         company-keywords
                                         company-semantic
                                         company-files
                                         company-etags
                                         company-elisp
                                         company-clang
                                         company-ispell
                                         company-yasnippet))
                (define-key company-mode-map
                  [remap indent-for-tab-command] 'company-indent-or-complete-common)

                (<bold><x-color><param>#859900</param>defkeys</x-color></bold> company-active-map
                  <x-color><param>#2aa198</param>"C-n"</x-color> company-select-next
                  <x-color><param>#2aa198</param>"C-p"</x-color> company-select-previous))
#+end_src
<x-color><param>#002b36</param>*</x-color><x-color><param>#859900</param>* [x] company-c-headers        </x-color>
#+begin_src emacs-lisp
  (<bold><x-color><param>#859900</param>with-hook</x-color></bold> company-c-headers-mode
             (diminish 'company-c-headers-mode)
             (add-to-list 'company-backends 'company-c-headers))
#+end_src
<x-color><param>#002b36</param>*</x-color><x-color><param>#859900</param>* [x] company-flx</x-color>
#+begin_src emacs-lisp
  (<bold><x-color><param>#859900</param>with-hook</x-color></bold> company
             (company-flx-mode +1))
#+end_src
<x-color><param>#002b36</param>*</x-color><x-color><param>#859900</param>* [x] company-math</x-color>
#+begin_src emacs-lisp
  (<bold><x-color><param>#859900</param>with-package</x-color></bold> company-math
                (diminish 'company-math-mode)
                (add-to-list 'company-backends 'company-math-symbols-latex)
                (add-to-list 'company-backends 'company-math-symbols-unicode))
#+end_src
<x-color><param>#002b36</param>*</x-color><x-color><param>#859900</param>* [x] company-quickhelp</x-color>
#+begin_src emacs-lisp
  (<bold><x-color><param>#859900</param>with-package</x-color></bold> company-quickhelp-mode
                (diminish 'company-quickhelp-mode)
                (add-hook 'global-company-mode-hook 'company-quickhelp-mode))
#+end_src
<x-color><param>#002b36</param>*</x-color><x-color><param>#859900</param>* [x] company-statistics</x-color>
#+begin_src emacs-lisp

#+end_src
<x-color><param>#002b36</param>*</x-color><x-color><param>#859900</param>* [x] company-try-hard</x-color>
#+begin_src emacs-lisp

#+end_src
<x-color><param>#002b36</param>*</x-color><x-color><param>#859900</param>* [x] company-web</x-color>
#+begin_src emacs-lisp

#+end_src
<x-color><param>#002b36</param>*</x-color><x-color><param>#859900</param>* [x] crux</x-color>
#+begin_src emacs-lisp

#+end_src
<x-color><param>#002b36</param>*</x-color><x-color><param>#859900</param>* [x] dap-mode</x-color>
#+begin_src emacs-lisp
  (<bold><x-color><param>#859900</param>with-package</x-color></bold> dap-mode
                (dap-auto-configure-mode))
#+end_src
<x-color><param>#002b36</param>*</x-color><x-color><param>#859900</param>* [x] dash</x-color>
#+begin_src emacs-lisp

#+end_src
<x-color><param>#002b36</param>*</x-color><x-color><param>#859900</param>* [x] debbugs</x-color>
#+begin_src emacs-lisp

#+end_src

<x-color><param>#002b36</param>*</x-color><x-color><param>#859900</param>* [x] deferred</x-color>
#+begin_src emacs-lisp

#+end_src

<x-color><param>#002b36</param>*</x-color><x-color><param>#859900</param>* [x] deft        </x-color>
#+begin_src emacs-lisp

#+end_src
<x-color><param>#002b36</param>*</x-color><x-color><param>#859900</param>* [x] devdocs-browser</x-color>
#+begin_src emacs-lisp

#+end_src
<x-color><param>#002b36</param>*</x-color><x-color><param>#859900</param>* [x] diminish        </x-color>
#+begin_src emacs-lisp

#+end_src
<x-color><param>#002b36</param>*</x-color><x-color><param>#859900</param>* [x] dired-git.el</x-color>
#+begin_src emacs-lisp

#+end_src

<x-color><param>#002b36</param>*</x-color><x-color><param>#859900</param>* [x] dired-hacks-utils        </x-color>
#+begin_src emacs-lisp

#+end_src
<x-color><param>#002b36</param>*</x-color><x-color><param>#859900</param>* [x] dired-narrow        </x-color>
#+begin_src emacs-lisp

#+end_src
<x-color><param>#002b36</param>*</x-color><x-color><param>#859900</param>* [x] dired-quick-sort</x-color>
#+begin_src emacs-lisp

#+end_src
<x-color><param>#002b36</param>*</x-color><x-color><param>#859900</param>* [x] dired-rsync</x-color>
#+begin_src emacs-lisp
  (<bold><x-color><param>#859900</param>with-hook</x-color></bold> after-init (<bold><x-color><param>#859900</param>when-idle</x-color></bold> (<bold><x-color><param>#859900</param>require</x-color></bold> '<bold><x-color><param>#268bd2</param>dired-async</x-color></bold>)))

  (<bold><x-color><param>#859900</param>with-package</x-color></bold> dired (<bold><x-color><param>#859900</param>require</x-color></bold> '<bold><x-color><param>#268bd2</param>dired-async</x-color></bold>))
#+end_src
<x-color><param>#002b36</param>*</x-color><x-color><param>#859900</param>* [x] dired-subtree</x-color>
#+begin_src emacs-lisp
  (<bold><x-color><param>#859900</param>with-hook</x-color></bold> after-init (<bold><x-color><param>#859900</param>when-idle</x-color></bold> (<bold><x-color><param>#859900</param>require</x-color></bold> '<bold><x-color><param>#268bd2</param>dired-subtree</x-color></bold>)))

  (<bold><x-color><param>#859900</param>with-package</x-color></bold> dired-subtree
                (<bold><x-color><param>#859900</param>setq</x-color></bold> dired-subtree-line-prefix <x-color><param>#2aa198</param>"    "</x-color>
                      dired-subtree-use-backgrounds nil))
#+end_src
<x-color><param>#002b36</param>*</x-color><x-color><param>#859900</param>* [x] d-mode</x-color>
#+begin_src emacs-lisp
(<bold><x-color><param>#859900</param>with-hook</x-color></bold> after-init
           (add-to-list 'auto-mode-alist '(<x-color><param>#2aa198</param>"\\.d[i]?\\'"</x-color> . d-mode)))
#+end_src
<x-color><param>#002b36</param>*</x-color><x-color><param>#859900</param>* [x] dumb-jump        </x-color>
#+begin_src emacs-lisp

#+end_src
<x-color><param>#002b36</param>*</x-color><x-color><param>#859900</param>* [x] ecukes</x-color>
#+begin_src emacs-lisp

#+end_src

<x-color><param>#002b36</param>*</x-color><x-color><param>#859900</param>* [x] eldev</x-color>
#+begin_src emacs-lisp

#+end_src
<x-color><param>#002b36</param>*</x-color><x-color><param>#859900</param>* [x] elisp-benchmarks</x-color>
#+begin_src emacs-lisp

#+end_src


<x-color><param>#002b36</param>*</x-color><x-color><param>#859900</param>* [x] elisp-def</x-color>
#+begin_src emacs-lisp

#+end_src
<x-color><param>#002b36</param>*</x-color><x-color><param>#859900</param>* [x] elisp-slime-nav</x-color>
#+begin_src emacs-lisp

#+end_src
<x-color><param>#002b36</param>*</x-color><x-color><param>#859900</param>* [x] elnode</x-color>
#+begin_src emacs-lisp

#+end_src
<x-color><param>#002b36</param>*</x-color><x-color><param>#859900</param>* [x] elpy        </x-color>
#+begin_src emacs-lisp
  (<bold><x-color><param>#859900</param>with-package</x-color></bold> elpy
                (elpy-enable)
                (<bold><x-color><param>#859900</param>setq</x-color></bold> elpy-modules (delq 'elpy-module-flymake elpy-modules))
              
                (<bold><x-color><param>#859900</param>defkeys</x-color></bold> elpy-mode-map
                  <x-color><param>#2aa198</param>"C-M-n"</x-color> elpy-nav-forward-block
                  <x-color><param>#2aa198</param>"C-M-p"</x-color> elpy-nav-backward-block))

  (<bold><x-color><param>#859900</param>with-hook</x-color></bold> elpy-mode
             <x-color><param>#586e75</param>;;(company-mode 1)           
</x-color>             (flycheck-mode 1)
             <x-color><param>#586e75</param>;;(make-local-variable 'company-backends)
</x-color>             <x-color><param>#586e75</param>;;(setq company-backends '((elpy-company-backend :with company-yasnippet)))
</x-color>             )
#+end_src
<x-color><param>#002b36</param>*</x-color><x-color><param>#859900</param>* [x] el-search</x-color>
#+begin_src emacs-lisp

#+end_src
<x-color><param>#002b36</param>*</x-color><x-color><param>#859900</param>* [x] emms</x-color>
#+begin_src emacs-lisp
(<bold><x-color><param>#859900</param>with-hook</x-color></bold> after-init
           (<bold><x-color><param>#859900</param>when-idle</x-color></bold> (<bold><x-color><param>#859900</param>require</x-color></bold> '<bold><x-color><param>#268bd2</param>emms</x-color></bold>))
           (<bold><x-color><param>#859900</param>defkeys</x-color></bold> global-map
             <x-color><param>#586e75</param>;; emms
</x-color>             <x-color><param>#2aa198</param>"C-v e SPC"</x-color>  emms-pause
             <x-color><param>#2aa198</param>"C-v e d"</x-color>    emms-play-directory
             <x-color><param>#2aa198</param>"C-v e l"</x-color>    emms-play-list
             <x-color><param>#2aa198</param>"C-v e n"</x-color>    emms-next
             <x-color><param>#2aa198</param>"C-v e p"</x-color>    emms-previous
             <x-color><param>#2aa198</param>"C-v e a"</x-color>    emms-add-directory
             <x-color><param>#2aa198</param>"C-v e A"</x-color>    emms-add-directory-tree
             <x-color><param>#2aa198</param>"C-v e +"</x-color>    pulseaudio-control-increase-volume
             <x-color><param>#2aa198</param>"C-v e -"</x-color>    pulseaudio-control-decrease-volume
             <x-color><param>#2aa198</param>"C-v e r"</x-color>    emms-start
             <x-color><param>#2aa198</param>"C-v e s"</x-color>    emms-stop
             <x-color><param>#2aa198</param>"C-v e m"</x-color>    emms-play-m3u-playlist))

(<bold><x-color><param>#859900</param>with-package</x-color></bold> emms
              (<bold><x-color><param>#859900</param>require</x-color></bold> '<bold><x-color><param>#268bd2</param>emms</x-color></bold>)
              (<bold><x-color><param>#859900</param>require</x-color></bold> '<bold><x-color><param>#268bd2</param>emms-setup</x-color></bold>)
              (<bold><x-color><param>#859900</param>require</x-color></bold> '<bold><x-color><param>#268bd2</param>emms-volume</x-color></bold>)
              (<bold><x-color><param>#859900</param>require</x-color></bold> '<bold><x-color><param>#268bd2</param>emms-source-file</x-color></bold>)
              (<bold><x-color><param>#859900</param>require</x-color></bold> '<bold><x-color><param>#268bd2</param>emms-source-playlist</x-color></bold>)
              (<bold><x-color><param>#859900</param>require</x-color></bold> '<bold><x-color><param>#268bd2</param>emms-playlist-mode</x-color></bold>)
              (<bold><x-color><param>#859900</param>require</x-color></bold> '<bold><x-color><param>#268bd2</param>emms-playlist-limit</x-color></bold>)
              (<bold><x-color><param>#859900</param>require</x-color></bold> '<bold><x-color><param>#268bd2</param>emms-playing-time</x-color></bold>)
              (<bold><x-color><param>#859900</param>require</x-color></bold> '<bold><x-color><param>#268bd2</param>emms-mode-line-cycle</x-color></bold>)
              (<bold><x-color><param>#859900</param>require</x-color></bold> '<bold><x-color><param>#268bd2</param>emms-player-mpv</x-color></bold>)
              (emms-all)
              (emms-history-load)
              (emms-default-players)
              (helm-mode 1)
              <x-color><param>#586e75</param>;;(emms-mode-line 1)
</x-color>              <x-color><param>#586e75</param>;;(emms-playing-time-mode 1)

</x-color>              (<bold><x-color><param>#859900</param>setq-default</x-color></bold> emms-player-list '(emms-player-mpv)
                            emms-player-mpv-environment '(<x-color><param>#2aa198</param>"PULSE_PROP_media.role=music"</x-color>))
              <x-color><param>#586e75</param>;;emms-player-mpv-ipc-method nil)
</x-color>              <x-color><param>#586e75</param>;; emms-player-mpv-debug t
</x-color>              <x-color><param>#586e75</param>;;     emms-player-mpv-environment '("PULSE_PROP_media.role=music")
</x-color>              <x-color><param>#586e75</param>;;     emms-player-mpv-parameters '("--quiet" "--really-quiet" "--no-audio-display" "--force-window=no" "--vo=null"))
</x-color>              
              (<bold><x-color><param>#859900</param>setq</x-color></bold> emms-source-file-default-directory (expand-file-name <x-color><param>#2aa198</param>"~/Musik"</x-color>))
              (<bold><x-color><param>#859900</param>setq</x-color></bold> emms-directory (expand-file-name <x-color><param>#2aa198</param>"etc/emms/"</x-color> user-emacs-directory)
                    emms-cache-file (expand-file-name <x-color><param>#2aa198</param>"cache"</x-color> emms-directory)
                    emms-history-file (expand-file-name <x-color><param>#2aa198</param>"history"</x-color> emms-directory)
                    emms-score-file (expand-file-name <x-color><param>#2aa198</param>"scores"</x-color> emms-directory)
                    emms-stream-bookmark-file (expand-file-name <x-color><param>#2aa198</param>"streams"</x-color> emms-directory)
                    emms-playlist-buffer-name <x-color><param>#2aa198</param>"*Music Playlist*"</x-color>
                    emms-show-format <x-color><param>#2aa198</param>"Playing: %s"</x-color>
                    <x-color><param>#586e75</param>;; Icon setup.
</x-color>                    emms-mode-line-icon-before-format <x-color><param>#2aa198</param>"["</x-color>
                    emms-mode-line-format <x-color><param>#2aa198</param>" %s]"</x-color>
                    emms-playing-time-display-format <x-color><param>#2aa198</param>"%s ]"</x-color>
                    emms-mode-line-icon-color <x-color><param>#2aa198</param>"lightgrey"</x-color>
                    global-mode-string '(<x-color><param>#2aa198</param>""</x-color> emms-mode-line-string <x-color><param>#2aa198</param>" "</x-color> emms-playing-time-string)
                    emms-source-file-directory-tree-function 'emms-source-file-directory-tree-find
                    emms-browser-covers 'emms-browser-cache-thumbnail)
              
              (add-to-list 'emms-info-functions 'emms-info-cueinfo)
              
              (<bold><x-color><param>#859900</param>when</x-color></bold> (executable-find <x-color><param>#2aa198</param>"emms-print-metadata"</x-color>)
                (<bold><x-color><param>#859900</param>require</x-color></bold> '<bold><x-color><param>#268bd2</param>emms-info-libtag</x-color></bold>)
                (add-to-list 'emms-info-functions 'emms-info-libtag)
                (delete 'emms-info-ogginfo emms-info-functions)
                (delete 'emms-info-mp3info emms-info-functions)
                (add-to-list 'emms-info-functions 'emms-info-ogginfo)
                (add-to-list 'emms-info-functions 'emms-info-mp3info))
              
              (add-hook 'emms-browser-tracks-added-hook 'z-emms-play-on-add)
              (add-hook 'emms-player-started-hook 'emms-show))
#+end_src
<x-color><param>#002b36</param>*</x-color><x-color><param>#859900</param>* [x] emms-mode-line-cycle        </x-color>
#+begin_src emacs-lisp

#+end_src
<x-color><param>#002b36</param>*</x-color><x-color><param>#859900</param>* [x] emr</x-color>
#+begin_src emacs-lisp

#+end_src
<x-color><param>#002b36</param>*</x-color><x-color><param>#859900</param>* [x] equake</x-color>
#+begin_src emacs-lisp
(<bold><x-color><param>#859900</param>with-package</x-color></bold> equake
              (advice-add #'save-buffers-kill-terminal <bold><x-color><param>#839496</param>:before-while</x-color></bold> #'equake-kill-emacs-advice)
              (global-set-key (kbd <x-color><param>#2aa198</param>"C-M-^"</x-color>) #'equake-restore-last-etab)
              (<bold><x-color><param>#859900</param>setq</x-color></bold> equake-default-shell 'eshell)
              <x-color><param>#586e75</param>;; set list of available shells
</x-color>              (<bold><x-color><param>#859900</param>setq</x-color></bold> equake-available-shells
                    '(<x-color><param>#2aa198</param>"shell"</x-color>
                      <x-color><param>#2aa198</param>"eshell"</x-color>
                      <x-color><param>#2aa198</param>"ielm"</x-color>)))
#+end_src
<x-color><param>#002b36</param>*</x-color><x-color><param>#859900</param>* [x] eros</x-color>
#+begin_src emacs-lisp

#+end_src
<x-color><param>#002b36</param>*</x-color><x-color><param>#859900</param>* [x] ert-runner</x-color>
#+begin_src emacs-lisp

#+end_src
<x-color><param>#002b36</param>*</x-color><x-color><param>#859900</param>* [x] espuds</x-color>
#+begin_src emacs-lisp

#+end_src

<x-color><param>#002b36</param>*</x-color><x-color><param>#859900</param>* [x] esup        </x-color>
#+begin_src emacs-lisp

#+end_src
<x-color><param>#002b36</param>*</x-color><x-color><param>#859900</param>* [x] esxml</x-color>
#+begin_src emacs-lisp

#+end_src
<x-color><param>#002b36</param>*</x-color><x-color><param>#859900</param>* [x] evil</x-color>
#+begin_src emacs-lisp

#+end_src
<x-color><param>#002b36</param>*</x-color><x-color><param>#859900</param>* [x] evil-exchange</x-color>
#+begin_src emacs-lisp

#+end_src
<x-color><param>#002b36</param>*</x-color><x-color><param>#859900</param>* [x] evil-matchit</x-color>
#+begin_src emacs-lisp

#+end_src
<x-color><param>#002b36</param>*</x-color><x-color><param>#859900</param>* [x] evil-multiedit</x-color>
#+begin_src emacs-lisp

#+end_src
<x-color><param>#002b36</param>*</x-color><x-color><param>#859900</param>* [x] evil-snipe</x-color>
#+begin_src emacs-lisp

#+end_src
<x-color><param>#002b36</param>*</x-color><x-color><param>#859900</param>* [x] ewmctrl</x-color>
#+begin_src emacs-lisp

#+end_src
<x-color><param>#002b36</param>*</x-color><x-color><param>#859900</param>* [x] expand-region        </x-color>
#+begin_src emacs-lisp
(<bold><x-color><param>#859900</param>with-hook</x-color></bold> after-init
           (<bold><x-color><param>#859900</param>defkeys</x-color></bold> global-map
             <x-color><param>#2aa198</param>"C-+"</x-color> er/expand-region
             <x-color><param>#2aa198</param>"C--"</x-color> er/contract-region))

(<bold><x-color><param>#859900</param>with-hook</x-color></bold> expand-region-mode
           (diminish 'expand-region-mode))
#+end_src
<x-color><param>#002b36</param>*</x-color><x-color><param>#859900</param>* [x] f</x-color>
#+begin_src emacs-lisp

#+end_src
<x-color><param>#002b36</param>*</x-color><x-color><param>#859900</param>* [x] feebleline</x-color>
#+begin_src emacs-lisp

#+end_src
<x-color><param>#002b36</param>*</x-color><x-color><param>#859900</param>* [x] flimenu        </x-color>
#+begin_src emacs-lisp
(<bold><x-color><param>#859900</param>with-package</x-color></bold> flimenu
              (flimenu-global-mode))
#+end_src
<x-color><param>#002b36</param>*</x-color><x-color><param>#859900</param>* [x] flycheck        </x-color>
#+begin_src emacs-lisp

#+end_src
<x-color><param>#002b36</param>*</x-color><x-color><param>#859900</param>* [x] flycheck-languagetool</x-color>
#+begin_src emacs-lisp
(<bold><x-color><param>#859900</param>with-package</x-color></bold>

 flycheck-languagetool

 (<bold><x-color><param>#859900</param>setq</x-color></bold> flycheck-languagetool-server-jar

       <x-color><param>#2aa198</param>"/usr/share/java/languagetool/languagetool-server.jar"</x-color>))
#+end_src


<x-color><param>#002b36</param>*</x-color><x-color><param>#859900</param>* [x] flycheck-package</x-color>
#+begin_src emacs-lisp

#+end_src

<x-color><param>#002b36</param>*</x-color><x-color><param>#859900</param>* [x] gh        </x-color>
#+begin_src emacs-lisp

#+end_src
<x-color><param>#002b36</param>*</x-color><x-color><param>#859900</param>* [x] gif-screencast</x-color>
#+begin_src emacs-lisp

#+end_src

<x-color><param>#002b36</param>*</x-color><x-color><param>#859900</param>* [x] gist        </x-color>
#+begin_src emacs-lisp

#+end_src
<x-color><param>#002b36</param>*</x-color><x-color><param>#859900</param>* [x] git-gutter        </x-color>
#+begin_src emacs-lisp

#+end_src
<x-color><param>#002b36</param>*</x-color><x-color><param>#859900</param>* [x] github-clone.el</x-color>
#+begin_src emacs-lisp

#+end_src


<x-color><param>#002b36</param>*</x-color><x-color><param>#859900</param>* [x] github-search        </x-color>
#+begin_src emacs-lisp

#+end_src
<x-color><param>#002b36</param>*</x-color><x-color><param>#859900</param>* [x] git-link        </x-color>
#+begin_src emacs-lisp

#+end_src
<x-color><param>#002b36</param>*</x-color><x-color><param>#859900</param>* [x] git-messenger</x-color>
#+begin_src emacs-lisp

#+end_src
<x-color><param>#002b36</param>*</x-color><x-color><param>#859900</param>* [x] gnu-elpa-keyring-update</x-color>
#+begin_src emacs-lisp

#+end_src
<x-color><param>#002b36</param>*</x-color><x-color><param>#859900</param>* [x] google-c-style        </x-color>
#+begin_src emacs-lisp
     (<bold><x-color><param>#859900</param>with-hook</x-color></bold> google-c-style-mode
                (diminish 'google-c-style-mode))
#+end_src
<x-color><param>#002b36</param>*</x-color><x-color><param>#859900</param>* [x] goto-last-change        </x-color>
#+begin_src emacs-lisp

#+end_src
<x-color><param>#002b36</param>*</x-color><x-color><param>#859900</param>* [x] helm        </x-color>
#+begin_src emacs-lisp
(<bold><x-color><param>#859900</param>with-hook</x-color></bold> after-init (<bold><x-color><param>#859900</param>when-idle</x-color></bold>
                       (<bold><x-color><param>#859900</param>require</x-color></bold> '<bold><x-color><param>#268bd2</param>helm</x-color></bold>)
                       (<bold><x-color><param>#859900</param>require</x-color></bold> '<bold><x-color><param>#268bd2</param>helm-config</x-color></bold>)
                       (<bold><x-color><param>#859900</param>require</x-color></bold> '<bold><x-color><param>#268bd2</param>helm-eshell</x-color></bold>)
                       (<bold><x-color><param>#859900</param>require</x-color></bold> '<bold><x-color><param>#268bd2</param>helm-buffers</x-color></bold>)
                       (<bold><x-color><param>#859900</param>require</x-color></bold> '<bold><x-color><param>#268bd2</param>helm-files</x-color></bold>)
                       (message <x-color><param>#2aa198</param>"Helm loaded on idle."</x-color>)))

(<bold><x-color><param>#859900</param>with-hook</x-color></bold> eshell-mode
           (<bold><x-color><param>#859900</param>defkeys</x-color></bold> eshell-mode-map
             <x-color><param>#2aa198</param>"C-c C-h"</x-color> helm-eshell-history
             <x-color><param>#2aa198</param>"C-c C-r"</x-color> helm-comint-input-ring
             <x-color><param>#2aa198</param>"C-c C-l"</x-color> helm-minibuffer-history))

(<bold><x-color><param>#859900</param>with-hook</x-color></bold> helm-ff-cache-mode
           (diminish 'helm-ff-cache-mode))

(<bold><x-color><param>#859900</param>with-package</x-color></bold> helm
              (<bold><x-color><param>#859900</param>require</x-color></bold> '<bold><x-color><param>#268bd2</param>helm-config</x-color></bold>)
              (<bold><x-color><param>#859900</param>require</x-color></bold> '<bold><x-color><param>#268bd2</param>helm-eshell</x-color></bold>)
              (<bold><x-color><param>#859900</param>require</x-color></bold> '<bold><x-color><param>#268bd2</param>helm-buffers</x-color></bold>)
              (<bold><x-color><param>#859900</param>require</x-color></bold> '<bold><x-color><param>#268bd2</param>helm-files</x-color></bold>)
              
              (<bold><x-color><param>#859900</param>defvar</x-color></bold> <x-color><param>#268bd2</param>helm-source-header-default-background</x-color> (face-attribute
                                                             'helm-source-header <bold><x-color><param>#839496</param>:background</x-color></bold>)) 
              (<bold><x-color><param>#859900</param>defvar</x-color></bold> <x-color><param>#268bd2</param>helm-source-header-default-foreground</x-color> (face-attribute
                                                             'helm-source-header <bold><x-color><param>#839496</param>:foreground</x-color></bold>)) 
              (<bold><x-color><param>#859900</param>defvar</x-color></bold> <x-color><param>#268bd2</param>helm-source-header-default-box</x-color> (face-attribute
                                                      'helm-source-header <bold><x-color><param>#839496</param>:box</x-color></bold>))
              (set-face-attribute 'helm-source-header nil <bold><x-color><param>#839496</param>:height</x-color></bold> 0.1)

              (<bold><x-color><param>#859900</param>defun</x-color></bold> <x-color><param>#268bd2</param>helm-toggle-header-line</x-color> ()
                (<bold><x-color><param>#859900</param>if</x-color></bold> (<bold><x-color><param>#859900</param>gt</x-color></bold> (length helm-sources) 1)
                    (set-face-attribute 'helm-source-header
                                        nil
                                        <bold><x-color><param>#839496</param>:foreground</x-color></bold> helm-source-header-default-foreground
                                        <bold><x-color><param>#839496</param>:background</x-color></bold> helm-source-header-default-background
                                        <bold><x-color><param>#839496</param>:box</x-color></bold> helm-source-header-default-box
                                        <bold><x-color><param>#839496</param>:height</x-color></bold> 1.0)
                  (set-face-attribute 'helm-source-header
                                      nil
                                      <bold><x-color><param>#839496</param>:foreground</x-color></bold> (face-attribute 'helm-selection <bold><x-color><param>#839496</param>:background</x-color></bold>)
                                      <bold><x-color><param>#839496</param>:background</x-color></bold> (face-attribute 'helm-selection <bold><x-color><param>#839496</param>:background</x-color></bold>)
                                      <bold><x-color><param>#839496</param>:box</x-color></bold> nil
                                      <bold><x-color><param>#839496</param>:height</x-color></bold> 0.1)))

              <x-color><param>#586e75</param>;; https://xenodium.com/change-emacs-shells-cwd-with-helm-projectile/
</x-color>              (<bold><x-color><param>#859900</param>require</x-color></bold> '<bold><x-color><param>#268bd2</param>helm-projectile</x-color></bold>)

              (<bold><x-color><param>#859900</param>defun</x-color></bold> <x-color><param>#268bd2</param>shell-cd</x-color> (dir-path)
                <x-color><param>#2aa198</param>"Like shell-pop--cd-to-cwd-shell, but without recentering."</x-color>
                (<bold><x-color><param>#859900</param>unless</x-color></bold> (string-equal mode-name <x-color><param>#2aa198</param>"Shell"</x-color>)
                  (<bold>error</bold> <x-color><param>#2aa198</param>"Not in Shell mode"</x-color>))
                (message mode-name)
                (goto-char (point-max))
                (comint-kill-input)
                (insert (concat <x-color><param>#2aa198</param>"cd "</x-color> (shell-quote-argument dir-path)))
                (<bold><x-color><param>#859900</param>let</x-color></bold> ((comint-process-echoes t))
                  (comint-send-input)))

              <x-color><param>#586e75</param>;; (defun helm-projectile-shell-cd ()
</x-color>              <x-color><param>#586e75</param>;;   "Change shell current working directory using helm projectile."
</x-color>              <x-color><param>#586e75</param>;;   (interactive)
</x-color>              <x-color><param>#586e75</param>;;   (unless (string-equal mode-name "Shell")
</x-color>              <x-color><param>#586e75</param>;;     (error "Not in Shell mode"))
</x-color>              <x-color><param>#586e75</param>;;   (let ((helm-dir-source (copy-tree  helm-source-projectile-directories-list)))
</x-color>              <x-color><param>#586e75</param>;;     (add-to-list '(action . shell-cd) helm-dir-source)
</x-color>              <x-color><param>#586e75</param>;;     (add-to-list '(keymap . nil) helm-dir-source)
</x-color>              <x-color><param>#586e75</param>;;     (add-to-list '(header-line . "cd to directory...") helm-dir-source)
</x-color>              <x-color><param>#586e75</param>;;     (helm :sources helm-dir-source
</x-color>              <x-color><param>#586e75</param>;;           :buffer "*helm-dirs*"
</x-color>              <x-color><param>#586e75</param>;;           :candidate-number-limit 10000)))
</x-color>              
              (<bold><x-color><param>#859900</param>defun</x-color></bold> <x-color><param>#268bd2</param>my-helm-next-source</x-color> ()
                (<bold><x-color><param>#859900</param>interactive</x-color></bold>)
                (helm-next-source)
                (helm-next-line))
              
              <x-color><param>#586e75</param>;; (defun my-helm-return ()
</x-color>              <x-color><param>#586e75</param>;;   (interactive)
</x-color>              <x-color><param>#586e75</param>;;   (helm-select-nth-action 0))
</x-color>              
              (<bold><x-color><param>#859900</param>setq</x-color></bold> helm-completion-style             'emacs
                    helm-display-header-line              nil
                    helm-completion-in-region-fuzzy-match t
                    helm-recentf-fuzzy-match              t
                    helm-buffers-fuzzy-matching           t
                    helm-locate-fuzzy-match               t
                    helm-lisp-fuzzy-completion            t
                    helm-session-fuzzy-match              t
                    helm-apropos-fuzzy-match              t
                    helm-imenu-fuzzy-match                t
                    helm-semantic-fuzzy-match             t
                    helm-M-x-fuzzy-match                  t
                    helm-split-window-inside-p            t
                    helm-move-to-line-cycle-in-source     t
                    helm-ff-search-library-in-sexp        t
                    helm-scroll-amount                    8
                    helm-ff-file-name-history-use-recentf t
                    helm-ff-auto-update-initial-value     t
                    helm-net-prefer-curl                  t
                    helm-autoresize-max-height            0
                    helm-autoresize-min-height           30
                    helm-candidate-number-limit         100
                    helm-idle-delay                     0.0
                    helm-input-idle-delay               0.0
                    helm-ff-cache-mode-lighter-sleep    nil
                    helm-ff-cache-mode-lighter-updating nil
                    helm-ff-cache-mode-lighter          nil
                    helm-ff-skip-boring-files            t)

              (<bold><x-color><param>#859900</param>dolist</x-color></bold> (regexp '(<x-color><param>#2aa198</param>"\\`\\*direnv"</x-color> <x-color><param>#2aa198</param>"\\`\\*straight"</x-color> <x-color><param>#2aa198</param>"\\`\\*xref"</x-color>))
                (<bold><x-color><param>#859900</param>push</x-color></bold> regexp helm-boring-buffer-regexp-list))

              (helm-autoresize-mode 1)
              (helm-adaptive-mode t)
              (helm-mode 1)

              (add-to-list 'helm-sources-using-default-as-input
                           'helm-source-man-pages)
              (<bold><x-color><param>#859900</param>setq</x-color></bold> helm-mini-default-sources '(helm-source-buffers-list
                                                helm-source-bookmarks
                                                helm-source-recentf
                                                helm-source-buffer-not-found
                                                projectile-known-projects))
              (<bold><x-color><param>#859900</param>defkeys</x-color></bold> helm-map
                <x-color><param>#2aa198</param>"M-i"</x-color> helm-previous-line
                <x-color><param>#2aa198</param>"M-k"</x-color> helm-next-line
                <x-color><param>#2aa198</param>"M-I"</x-color> helm-previous-page
                <x-color><param>#2aa198</param>"M-K"</x-color> helm-next-page
                <x-color><param>#2aa198</param>"M-h"</x-color> helm-beginning-of-buffer
                <x-color><param>#2aa198</param>"M-H"</x-color> helm-end-of-buffer)

              (<bold><x-color><param>#859900</param>defkeys</x-color></bold> shell-mode-map
                       <x-color><param>#2aa198</param>"C-c C-l"</x-color> helm-comint-input-ring)
              
              (<bold><x-color><param>#859900</param>defkeys</x-color></bold> helm-read-file-map
                <x-color><param>#2aa198</param>"C-o"</x-color> my-helm-next-source
                <x-color><param>#586e75</param>;;"RET" my-helm-return
</x-color>                ))

(<bold><x-color><param>#859900</param>with-hook</x-color></bold> after-init
           (<bold><x-color><param>#859900</param>defkeys</x-color></bold> global-map
             <x-color><param>#2aa198</param>"M-x"</x-color>     helm-M-x
             <x-color><param>#2aa198</param>"C-z ,"</x-color>   helm-pages
             <x-color><param>#2aa198</param>"C-x C-b"</x-color> helm-buffers-list
             <x-color><param>#2aa198</param>"C-z a"</x-color>   helm-ag
             <x-color><param>#2aa198</param>"C-z b"</x-color>   helm-filtered-bookmarks
             <x-color><param>#2aa198</param>"C-z c"</x-color>   helm-company
             <x-color><param>#2aa198</param>"C-z d"</x-color>   helm-dabbrev
             <x-color><param>#2aa198</param>"C-z e"</x-color>   helm-calcul-expression
             <x-color><param>#2aa198</param>"C-z g"</x-color>   helm-google-suggest
             <x-color><param>#2aa198</param>"C-z h"</x-color>   helm-descbinds
             <x-color><param>#2aa198</param>"C-z i"</x-color>   helm-imenu-anywhere
             <x-color><param>#2aa198</param>"C-z k"</x-color>   helm-show-kill-ring
             <x-color><param>#2aa198</param>"C-z C-c"</x-color> helm-git-local-branches
             <x-color><param>#2aa198</param>"C-z f"</x-color>   helm-find-files
             <x-color><param>#2aa198</param>"C-z m"</x-color>   helm-mini
             <x-color><param>#2aa198</param>"C-z o"</x-color>   helm-occur
             <x-color><param>#2aa198</param>"C-z p"</x-color>   helm-browse-project
             <x-color><param>#2aa198</param>"C-z q"</x-color>   helm-apropos
             <x-color><param>#2aa198</param>"C-z r"</x-color>   helm-recentf
             <x-color><param>#2aa198</param>"C-z s"</x-color>   helm-swoop
             <x-color><param>#2aa198</param>"C-z C-c"</x-color> helm-colors
             <x-color><param>#2aa198</param>"C-z x"</x-color>   helm-M-x
             <x-color><param>#2aa198</param>"C-z y"</x-color>   helm-yas-complete
             <x-color><param>#2aa198</param>"C-z C-g"</x-color> helm-ls-git-ls
             <x-color><param>#2aa198</param>"C-z C-b"</x-color> helm-git-local-branches
             <x-color><param>#2aa198</param>"C-z SPC"</x-color> helm-all-mark-rings))

(<bold><x-color><param>#859900</param>with-hook</x-color></bold> helm-mode (diminish 'helm-mode))
#+end_src

<x-color><param>#002b36</param>*</x-color><x-color><param>#859900</param>* [x] helm-ag        </x-color>
#+begin_src emacs-lisp
     (<bold><x-color><param>#859900</param>with-package</x-color></bold> helm-ag
                   (<bold><x-color><param>#859900</param>setq</x-color></bold> helm-ag-use-agignore t
                         helm-ag-base-command 
                         <x-color><param>#2aa198</param>"ag --mmap --nocolor --nogroup --ignore-case --ignore=*terraform.tfstate.backup*"</x-color>))
#+end_src
<x-color><param>#002b36</param>*</x-color><x-color><param>#859900</param>* [x] helm-company</x-color>
#+begin_src emacs-lisp

#+end_src
<x-color><param>#002b36</param>*</x-color><x-color><param>#859900</param>* [x] helm-c-yasnippet        </x-color>
#+begin_src emacs-lisp
     (<bold><x-color><param>#859900</param>with-package</x-color></bold> helm-c-yasnippet
                   (<bold><x-color><param>#859900</param>setq</x-color></bold> helm-yas-space-match-any-greedy t))
#+end_src
<x-color><param>#002b36</param>*</x-color><x-color><param>#859900</param>* [x] helm-dash        </x-color>
#+begin_src emacs-lisp

#+end_src
<x-color><param>#002b36</param>*</x-color><x-color><param>#859900</param>* [x] helm-descbinds        </x-color>
#+begin_src emacs-lisp

#+end_src
<x-color><param>#002b36</param>*</x-color><x-color><param>#859900</param>* [x] helm-dired-history       </x-color>
#+begin_src emacs-lisp
     (<bold><x-color><param>#859900</param>with-package</x-color></bold> helm-dired-history
                   (<bold><x-color><param>#859900</param>require</x-color></bold> '<bold><x-color><param>#268bd2</param>savehist</x-color></bold>)
                   (add-to-list 'savehist-additional-variables
                                'helm-dired-history-variable)
                   (savehist-mode 1)
                   (<bold><x-color><param>#859900</param>with-eval-after-load</x-color></bold> <x-color><param>#2aa198</param>"dired"</x-color>
                     (<bold><x-color><param>#859900</param>require</x-color></bold> '<bold><x-color><param>#268bd2</param>helm-dired-history</x-color></bold>)
                     (define-key dired-mode-map <x-color><param>#2aa198</param>","</x-color> 'dired)))
#+end_src
<x-color><param>#002b36</param>*</x-color><x-color><param>#859900</param>* [x] helm-emms        </x-color>
#+begin_src emacs-lisp

#+end_src
<x-color><param>#002b36</param>*</x-color><x-color><param>#859900</param>* [x] helm-firefox        </x-color>
#+begin_src emacs-lisp

#+end_src
<x-color><param>#002b36</param>*</x-color><x-color><param>#859900</param>* [x] helm-flx</x-color>
#+begin_src emacs-lisp
(<bold><x-color><param>#859900</param>with-package</x-color></bold> helm
           (<bold><x-color><param>#859900</param>when-idle</x-color></bold>
            (<bold><x-color><param>#859900</param>setq</x-color></bold> helm-flx-for-helm-find-files t
                  helm-flx-for-helm-locate t)
            (helm-flx-mode +1)))
#+end_src
<x-color><param>#002b36</param>*</x-color><x-color><param>#859900</param>* [x] helm-flyspell        </x-color>
#+begin_src emacs-lisp

#+end_src
<x-color><param>#002b36</param>*</x-color><x-color><param>#859900</param>* [x] helm-fuzzier        </x-color>
#+begin_src emacs-lisp

#+end_src
<x-color><param>#002b36</param>*</x-color><x-color><param>#859900</param>* [x] helm-git-grep</x-color>
#+begin_src emacs-lisp

#+end_src
<x-color><param>#002b36</param>*</x-color><x-color><param>#859900</param>* [x] helm-ls-git        </x-color>
#+begin_src emacs-lisp

#+end_src
<x-color><param>#002b36</param>*</x-color><x-color><param>#859900</param>* [x] helm-lsp</x-color>
#+begin_src emacs-lisp
     (<bold><x-color><param>#859900</param>with-package</x-color></bold> helm-lsp
                   (<bold><x-color><param>#859900</param>defun</x-color></bold> <x-color><param>#268bd2</param>netrom/helm-lsp-workspace-symbol-at-point</x-color> ()
                     (<bold><x-color><param>#859900</param>interactive</x-color></bold>)
                     (<bold><x-color><param>#859900</param>let</x-color></bold> ((current-prefix-arg t))
                       (call-interactively 'helm-lsp-workspace-symbol)))

                   (<bold><x-color><param>#859900</param>defun</x-color></bold> <x-color><param>#268bd2</param>netrom/helm-lsp-global-workspace-symbol-at-point</x-color> ()
                     (<bold><x-color><param>#859900</param>interactive</x-color></bold>)
                     (<bold><x-color><param>#859900</param>let</x-color></bold> ((current-prefix-arg t))
                       (call-interactively 'helm-lsp-global-workspace-symbol)))

                   (<bold><x-color><param>#859900</param>setq</x-color></bold> netrom--general-lsp-hydra-heads
                         '(<x-color><param>#586e75</param>;; Xref
</x-color>                           (<x-color><param>#2aa198</param>"d"</x-color> xref-find-definitions <x-color><param>#2aa198</param>"Definitions"</x-color> <bold><x-color><param>#839496</param>:column</x-color></bold> <x-color><param>#2aa198</param>"Xref"</x-color>)
                           (<x-color><param>#2aa198</param>"D"</x-color> xref-find-definitions-other-window <x-color><param>#2aa198</param>"-> other win"</x-color>)
                           (<x-color><param>#2aa198</param>"r"</x-color> xref-find-references <x-color><param>#2aa198</param>"References"</x-color>)
                           (<x-color><param>#2aa198</param>"s"</x-color> netrom/helm-lsp-workspace-symbol-at-point <x-color><param>#2aa198</param>"Helm search"</x-color>)
                           (<x-color><param>#2aa198</param>"S"</x-color> netrom/helm-lsp-global-workspace-symbol-at-point <x-color><param>#2aa198</param>"Helm global search"</x-color>)

                           <x-color><param>#586e75</param>;; Peek
</x-color>                           (<x-color><param>#2aa198</param>"C-d"</x-color> lsp-ui-peek-find-definitions <x-color><param>#2aa198</param>"Definitions"</x-color> <bold><x-color><param>#839496</param>:column</x-color></bold> <x-color><param>#2aa198</param>"Peek"</x-color>)
                           (<x-color><param>#2aa198</param>"C-r"</x-color> lsp-ui-peek-find-references <x-color><param>#2aa198</param>"References"</x-color>)
                           (<x-color><param>#2aa198</param>"C-i"</x-color> lsp-ui-peek-find-implementation <x-color><param>#2aa198</param>"Implementation"</x-color>)

                           <x-color><param>#586e75</param>;; LSP
</x-color>                           (<x-color><param>#2aa198</param>"p"</x-color> lsp-describe-thing-at-point <x-color><param>#2aa198</param>"Describe at point"</x-color> <bold><x-color><param>#839496</param>:column</x-color></bold> <x-color><param>#2aa198</param>"LSP"</x-color>)
                           (<x-color><param>#2aa198</param>"C-a"</x-color> lsp-execute-code-action <x-color><param>#2aa198</param>"Execute code action"</x-color>)
                           (<x-color><param>#2aa198</param>"R"</x-color> lsp-rename <x-color><param>#2aa198</param>"Rename"</x-color>)
                           (<x-color><param>#2aa198</param>"t"</x-color> lsp-goto-type-definition <x-color><param>#2aa198</param>"Type definition"</x-color>)
                           (<x-color><param>#2aa198</param>"i"</x-color> lsp-goto-implementation <x-color><param>#2aa198</param>"Implementation"</x-color>)
                           (<x-color><param>#2aa198</param>"f"</x-color> helm-imenu <x-color><param>#2aa198</param>"Filter funcs/classes (Helm)"</x-color>)
                           (<x-color><param>#2aa198</param>"C-c"</x-color> lsp-describe-session <x-color><param>#2aa198</param>"Describe session"</x-color>)

                           <x-color><param>#586e75</param>;; Flycheck
</x-color>                           (<x-color><param>#2aa198</param>"l"</x-color> lsp-ui-flycheck-list <x-color><param>#2aa198</param>"List errs/warns/notes"</x-color> <bold><x-color><param>#839496</param>:column</x-color></bold> <x-color><param>#2aa198</param>"Flycheck"</x-color>))

                         netrom--misc-lsp-hydra-heads
                         '(<x-color><param>#586e75</param>;; Misc
</x-color>                           (<x-color><param>#2aa198</param>"q"</x-color> nil <x-color><param>#2aa198</param>"Cancel"</x-color> <bold><x-color><param>#839496</param>:column</x-color></bold> <x-color><param>#2aa198</param>"Misc"</x-color>)
                           (<x-color><param>#2aa198</param>"b"</x-color> pop-tag-mark <x-color><param>#2aa198</param>"Back"</x-color>)))

                   <x-color><param>#586e75</param>;; Create general hydra.
</x-color>                   (eval `(<bold><x-color><param>#859900</param>defhydra</x-color></bold> netrom/lsp-hydra (<bold><x-color><param>#839496</param>:color</x-color></bold> blue <bold><x-color><param>#839496</param>:hint</x-color></bold> nil)
                            ,@(append
                               netrom--general-lsp-hydra-heads
                               netrom--misc-lsp-hydra-heads)))

                   (<bold><x-color><param>#859900</param>defkeys</x-color></bold> lsp-mode-map
                     [remap xref-find-apropos] helm-lsp-workspace-symbol
                     <x-color><param>#2aa198</param>"C-c C-l"</x-color> netrom/lsp-hydra/body))
#+end_src
<x-color><param>#002b36</param>*</x-color><x-color><param>#859900</param>* [x] helm-make        </x-color>
#+begin_src emacs-lisp

#+end_src
<x-color><param>#002b36</param>*</x-color><x-color><param>#859900</param>* [x] helm-navi        </x-color>
#+begin_src emacs-lisp

#+end_src
<x-color><param>#002b36</param>*</x-color><x-color><param>#859900</param>* [x] helm-org        </x-color>
#+begin_src emacs-lisp

#+end_src
<x-color><param>#002b36</param>*</x-color><x-color><param>#859900</param>* [x] helm-pages</x-color>
#+begin_src emacs-lisp

#+end_src

<x-color><param>#002b36</param>*</x-color><x-color><param>#859900</param>* [x] helm-projectile        </x-color>
#+begin_src emacs-lisp

#+end_src

<x-color><param>#002b36</param>*</x-color><x-color><param>#859900</param>* [x] helm-sly </x-color>
#+begin_src emacs-lisp

#+end_src
<x-color><param>#002b36</param>*</x-color><x-color><param>#859900</param>* [x] helm-smex        </x-color>
#+begin_src emacs-lisp

#+end_src
<x-color><param>#002b36</param>*</x-color><x-color><param>#859900</param>* [x] helm-swoop        </x-color>
#+begin_src emacs-lisp

#+end_src
<x-color><param>#002b36</param>*</x-color><x-color><param>#859900</param>* [x] helm-system-packages</x-color>
#+begin_src emacs-lisp

#+end_src
<x-color><param>#002b36</param>*</x-color><x-color><param>#859900</param>* [x] helm-xref        </x-color>
#+begin_src emacs-lisp

#+end_src
<x-color><param>#002b36</param>*</x-color><x-color><param>#859900</param>* [x] helpful        </x-color>
#+begin_src emacs-lisp
(<bold><x-color><param>#859900</param>with-package</x-color></bold> helpful
              (define-key helpful-mode-map (kbd <x-color><param>#2aa198</param>"i"</x-color>)
                (<bold><x-color><param>#859900</param>lambda</x-color></bold> nil (<bold><x-color><param>#859900</param>interactive</x-color></bold>) (info-lookup 'symbol helpful--sym #'emacs-lisp-mode)))
              (<bold><x-color><param>#859900</param>setq</x-color></bold> helpful-max-buffers 1))

(<bold><x-color><param>#859900</param>with-hook</x-color></bold> after-init
           (<bold><x-color><param>#859900</param>defkeys</x-color></bold> global-map
             <x-color><param>#2aa198</param>"C-h C-v"</x-color> helpful-variable
             <x-color><param>#2aa198</param>"C-h C-k"</x-color> helpful-key
             <x-color><param>#2aa198</param>"C-h C-f"</x-color> helpful-callable
             <x-color><param>#2aa198</param>"C-h C-j"</x-color> helpful-at-point
             <x-color><param>#2aa198</param>"C-h C-u"</x-color> helpful-command))
#+end_src

<x-color><param>#002b36</param>*</x-color><x-color><param>#859900</param>* [x] hide-mode-line</x-color>
#+begin_src emacs-lisp

#+end_src
<x-color><param>#002b36</param>*</x-color><x-color><param>#859900</param>* [x] ht</x-color>
#+begin_src emacs-lisp

#+end_src
<x-color><param>#002b36</param>*</x-color><x-color><param>#859900</param>* [x] hydra</x-color>
#+begin_src emacs-lisp
(<bold><x-color><param>#859900</param>with-package</x-color></bold> hydra
              (<bold><x-color><param>#859900</param>defkeys</x-color></bold> global-map
                <x-color><param>#2aa198</param>"C-x t"</x-color>
                (<bold><x-color><param>#859900</param>defhydra</x-color></bold> toggle (<bold><x-color><param>#839496</param>:color</x-color></bold> blue)
                  <x-color><param>#2aa198</param>"toggle"</x-color>
                  (<x-color><param>#2aa198</param>"a"</x-color> abbrev-mode <x-color><param>#2aa198</param>"abbrev"</x-color>)
                  (<x-color><param>#2aa198</param>"s"</x-color> flyspell-mode <x-color><param>#2aa198</param>"flyspell"</x-color>)
                  (<x-color><param>#2aa198</param>"d"</x-color> toggle-debug-on-error <x-color><param>#2aa198</param>"debug"</x-color>)
                  (<x-color><param>#2aa198</param>"c"</x-color> fci-mode <x-color><param>#2aa198</param>"fCi"</x-color>)
                  (<x-color><param>#2aa198</param>"f"</x-color> auto-fill-mode <x-color><param>#2aa198</param>"fill"</x-color>)
                  (<x-color><param>#2aa198</param>"t"</x-color> toggle-truncate-lines <x-color><param>#2aa198</param>"truncate"</x-color>)
                  (<x-color><param>#2aa198</param>"w"</x-color> whitespace-mode <x-color><param>#2aa198</param>"whitespace"</x-color>)
                  (<x-color><param>#2aa198</param>"q"</x-color> nil <x-color><param>#2aa198</param>"cancel"</x-color>))
                <x-color><param>#2aa198</param>"C-x j"</x-color>
                (<bold><x-color><param>#859900</param>defhydra</x-color></bold> gotoline
                  ( <bold><x-color><param>#839496</param>:pre</x-color></bold> (linum-mode 1)
                    <bold><x-color><param>#839496</param>:post</x-color></bold> (linum-mode -1))
                  <x-color><param>#2aa198</param>"goto"</x-color>
                  (<x-color><param>#2aa198</param>"t"</x-color> (<bold><x-color><param>#859900</param>lambda</x-color></bold> () (<bold><x-color><param>#859900</param>interactive</x-color></bold>)(move-to-window-line-top-bottom 0)) <x-color><param>#2aa198</param>"top"</x-color>)
                  (<x-color><param>#2aa198</param>"b"</x-color> (<bold><x-color><param>#859900</param>lambda</x-color></bold> () (<bold><x-color><param>#859900</param>interactive</x-color></bold>)(move-to-window-line-top-bottom -1)) <x-color><param>#2aa198</param>"bottom"</x-color>)
                  (<x-color><param>#2aa198</param>"m"</x-color> (<bold><x-color><param>#859900</param>lambda</x-color></bold> () (<bold><x-color><param>#859900</param>interactive</x-color></bold>)(move-to-window-line-top-bottom)) <x-color><param>#2aa198</param>"middle"</x-color>)
                  (<x-color><param>#2aa198</param>"e"</x-color> (<bold><x-color><param>#859900</param>lambda</x-color></bold> () (<bold><x-color><param>#859900</param>interactive</x-color></bold>)(goto-char (point-max)) <x-color><param>#2aa198</param>"end"</x-color>))
                  (<x-color><param>#2aa198</param>"c"</x-color> recenter-top-bottom <x-color><param>#2aa198</param>"recenter"</x-color>)
                  (<x-color><param>#2aa198</param>"n"</x-color> next-line <x-color><param>#2aa198</param>"down"</x-color>)
                  (<x-color><param>#2aa198</param>"p"</x-color> (<bold><x-color><param>#859900</param>lambda</x-color></bold> () (<bold><x-color><param>#859900</param>interactive</x-color></bold>) (forward-line -1))  <x-color><param>#2aa198</param>"up"</x-color>)
                  (<x-color><param>#2aa198</param>"g"</x-color> goto-line <x-color><param>#2aa198</param>"goto-line"</x-color>))
                <x-color><param>#2aa198</param>"C-c t"</x-color>
                (<bold><x-color><param>#859900</param>defhydra</x-color></bold> hydra-global-org (<bold><x-color><param>#839496</param>:color</x-color></bold> blue)
                  <x-color><param>#2aa198</param>"Org"</x-color>
                  (<x-color><param>#2aa198</param>"t"</x-color> org-timer-start <x-color><param>#2aa198</param>"Start Timer"</x-color>)
                  (<x-color><param>#2aa198</param>"s"</x-color> org-timer-stop <x-color><param>#2aa198</param>"Stop Timer"</x-color>)
                  (<x-color><param>#2aa198</param>"r"</x-color> org-timer-set-timer <x-color><param>#2aa198</param>"Set Timer"</x-color>) <x-color><param>#586e75</param>; This one requires you be in an orgmode doc, as it sets the timer for the header
</x-color>                  (<x-color><param>#2aa198</param>"p"</x-color> org-timer <x-color><param>#2aa198</param>"Print Timer"</x-color>) <x-color><param>#586e75</param>; output timer value to buffer
</x-color>                  (<x-color><param>#2aa198</param>"w"</x-color> (org-clock-in '(4)) <x-color><param>#2aa198</param>"Clock-In"</x-color>) <x-color><param>#586e75</param>; used with (org-clock-persistence-insinuate) (setq org-clock-persist t)
</x-color>                  (<x-color><param>#2aa198</param>"o"</x-color> org-clock-out <x-color><param>#2aa198</param>"Clock-Out"</x-color>) <x-color><param>#586e75</param>; you might also want (setq org-log-note-clock-out t)
</x-color>                  (<x-color><param>#2aa198</param>"j"</x-color> org-clock-goto <x-color><param>#2aa198</param>"Clock Goto"</x-color>) <x-color><param>#586e75</param>; global visit the clocked task
</x-color>                  (<x-color><param>#2aa198</param>"c"</x-color> org-capture <x-color><param>#2aa198</param>"Capture"</x-color>) <x-color><param>#586e75</param>; Dont forget to define the captures you want http://orgmode.org/manual/Capture.html
</x-color>                  (<x-color><param>#2aa198</param>"l"</x-color> (<bold><x-color><param>#859900</param>or</x-color></bold> )rg-capture-goto-last-stored <x-color><param>#2aa198</param>"Last Capture"</x-color>))))
#+end_src
<x-color><param>#002b36</param>*</x-color><x-color><param>#859900</param>* [x] iedit        </x-color>
#+begin_src emacs-lisp

#+end_src
<x-color><param>#002b36</param>*</x-color><x-color><param>#859900</param>* [x] imenu-anywhere        </x-color>
#+begin_src emacs-lisp

#+end_src
<x-color><param>#002b36</param>*</x-color><x-color><param>#859900</param>* [x] import-js        </x-color>
#+begin_src emacs-lisp

#+end_src
<x-color><param>#002b36</param>*</x-color><x-color><param>#859900</param>* [x] keycast</x-color>
#+begin_src emacs-lisp

#+end_src

<x-color><param>#002b36</param>*</x-color><x-color><param>#859900</param>* [x] kv</x-color>
#+begin_src emacs-lisp

#+end_src
<x-color><param>#002b36</param>*</x-color><x-color><param>#859900</param>* [x] languagetool</x-color>
#+begin_src emacs-lisp

(<bold><x-color><param>#859900</param>with-package</x-color></bold>

 languagetool

 
 (<bold><x-color><param>#859900</param>setq</x-color></bold> languagetool-java-arguments '(<x-color><param>#2aa198</param>"-Dfile.encoding=UTF-8"</x-color>)
       languagetool-console-command <x-color><param>#2aa198</param>"/usr/share/java/languagetool/languagetool-commandline.jar"</x-color>
       languagetool-server-command <x-color><param>#2aa198</param>"/usr/share/java/languagetool/languagetool-server.jar"</x-color>))

#+end_src

<x-color><param>#002b36</param>*</x-color><x-color><param>#859900</param>* [x] lispy</x-color>
#+begin_src emacs-lisp

#+end_src
<x-color><param>#002b36</param>*</x-color><x-color><param>#859900</param>* [x] lsp-java        </x-color>
#+begin_src emacs-lisp

#+end_src
<x-color><param>#002b36</param>*</x-color><x-color><param>#859900</param>* [x] lsp-mode        </x-color>
#+begin_src emacs-lisp
(<bold><x-color><param>#859900</param>with-package</x-color></bold> lsp-mode
              (<bold><x-color><param>#859900</param>setq</x-color></bold> lsp-diagnostic-provider <bold><x-color><param>#839496</param>:none</x-color></bold>
                    lsp-keymap-prefix <x-color><param>#2aa198</param>"C-f"</x-color>
                    lsp-completion-provider t
                    lsp-enable-xref t
                    lsp-auto-configure t
                    lsp-auto-guess-root t
                    <x-color><param>#586e75</param>;;lsp-inhibit-message t
</x-color>                    lsp-enable-snippet t
                    lsp-restart 'interactive
                    lsp-log-io nil
                    lsp-idle-delay 0.1
                    lsp-enable-links nil
                    lsp-enable-symbol-highlighting t
                    lsp-keep-workspace-alive t
                    lsp-clients-clangd-args '(<x-color><param>#2aa198</param>"-j=4"</x-color> <x-color><param>#2aa198</param>"-background-index"</x-color> <x-color><param>#2aa198</param>"-log=error"</x-color>)
                    <x-color><param>#586e75</param>;; python
</x-color>                    <x-color><param>#586e75</param>;; lsp-python-executable-cmd "python3"
</x-color>                    <x-color><param>#586e75</param>;; lsp-python-ms-executable "~/repos/python-language-server/output/bin/Release/osx-x64/publish/Microsoft.Python.LanguageServer"
</x-color>                    lsp-enable-completion-enable t
                    lsp-pyls-plugins-flake8-enabled t)
              
              (lsp-register-custom-settings
               '((<x-color><param>#2aa198</param>"pyls.plugins.pyls_mypy.enabled"</x-color> t t)
                 (<x-color><param>#2aa198</param>"pyls.plugins.pyls_mypy.live_mode"</x-color> nil t)
                 (<x-color><param>#2aa198</param>"pyls.plugins.pyls_black.enabled"</x-color> t t)
                 (<x-color><param>#2aa198</param>"pyls.plugins.pyls_isort.enabled"</x-color> t t)
                 <x-color><param>#586e75</param>;; Disable these as they're duplicated by flake8
</x-color>                 (<x-color><param>#2aa198</param>"pyls.plugins.pycodestyle.enabled"</x-color> nil t)
                 (<x-color><param>#2aa198</param>"pyls.plugins.mccabe.enabled"</x-color> nil t)
                 (<x-color><param>#2aa198</param>"pyls.plugins.pyflakes.enabled"</x-color> nil t)))

               (add-hook 'lsp-mode-hook #'lsp-enable-which-key-integration)
               (add-hook 'lsp-managed-mode-hook (<bold><x-color><param>#859900</param>lambda</x-color></bold> () (<bold><x-color><param>#859900</param>setq-local</x-color></bold> company-backends
                                                                       '(company-capf))))
               (<bold><x-color><param>#859900</param>require</x-color></bold> '<bold><x-color><param>#268bd2</param>dap-chrome</x-color></bold>)
               (<bold><x-color><param>#859900</param>require</x-color></bold> '<bold><x-color><param>#268bd2</param>dap-cpptools</x-color></bold>)
               (diminish 'lsp-mode))

              (<bold><x-color><param>#859900</param>with-hook</x-color></bold> python-mode
                         (lsp-deferred))
#+end_src
<x-color><param>#002b36</param>*</x-color><x-color><param>#859900</param>* [x] lsp-pyright</x-color>
#+begin_src emacs-lisp
     <x-color><param>#586e75</param>;; (with-package lsp-pyright
</x-color>     <x-color><param>#586e75</param>;;               (setq lsp-clients-python-library-directories '("/usr"
</x-color>     <x-color><param>#586e75</param>;;                                                              "~/miniconda3/pkgs")
</x-color>     <x-color><param>#586e75</param>;;                     lsp-pyright-disable-language-service nil
</x-color>     <x-color><param>#586e75</param>;;                     lsp-pyright-dsable-organize-imports nil
</x-color>     <x-color><param>#586e75</param>;;                     lsp-pyright-auto-import-completions t
</x-color>     <x-color><param>#586e75</param>;;                     lsp-pyright-use-library-code-for-types t
</x-color>     <x-color><param>#586e75</param>;;                     lsp-pyright-venv-pat "~/miniconda3/envs"))

</x-color>     <x-color><param>#586e75</param>;; (with-hook python-mode
</x-color>     <x-color><param>#586e75</param>;;            (require 'lsp-pyright)
</x-color>     <x-color><param>#586e75</param>;;            (lsp-deferred)
</x-color>     <x-color><param>#586e75</param>;;            (setq python-shell-interpreter "ipython"
</x-color>     <x-color><param>#586e75</param>;;                  python-shell-interpreter-args "-i --simple-prompt"))
</x-color>#+end_src
<x-color><param>#002b36</param>*</x-color><x-color><param>#859900</param>* [x] lsp-treemacs        </x-color>
#+begin_src emacs-lisp

#+end_src
<x-color><param>#002b36</param>*</x-color><x-color><param>#859900</param>* [x] lsp-ui</x-color>
#+begin_src emacs-lisp
(<bold><x-color><param>#859900</param>with-package</x-color></bold> lsp-ui
              (add-hook 'lsp-mode-hook 'lsp-ui-mode)
              (<bold><x-color><param>#859900</param>setq</x-color></bold> lsp-ui-doc-enable t
                    lsp-ui-sideline-show-hover t
                    lsp-ui-doc-header t
                    lsp-ui-doc-delay 2
                    lsp-ui-doc-include-signature t
                    lsp-ui-doc-position 'top
                    lsp-ui-doc-alignment 'frame
                    lsp-ui-doc-border (face-foreground 'default)
                    lsp-ui-sideline-enable nil
                    lsp-ui-sideline-ignore-duplicate t
                    lsp-ui-sideline-show-code-actions nil
                    lsp-ui-sideline-ignore-duplicate t
                    <x-color><param>#586e75</param>;; Use lsp-ui-doc-webkit only in GUI
</x-color>                    lsp-ui-doc-use-webkit t
                    lsp-ui-doc-include-signature t
                    lsp-ui-doc-use-childframe t
                    <x-color><param>#586e75</param>;; WORKAROUND Hide mode-line of the lsp-ui-imenu buffer
</x-color>                    <x-color><param>#586e75</param>;; https://github.com/emacs-lsp/lsp-ui/issues/243
</x-color>                    <x-color><param>#586e75</param>;;mode-line-format nil
</x-color>                    )
              (<bold><x-color><param>#859900</param>defadvice</x-color></bold> <x-color><param>#268bd2</param>lsp-ui-imenu</x-color> (after hide-lsp-ui-imenu-mode-line activate))
           (<bold><x-color><param>#859900</param>defkeys</x-color></bold> lsp-ui-mode-map
             [remap xref-find-references]  lsp-ui-peek-find-references
             [remap xref-find-definitions] lsp-ui-peek-find-definitions
             <x-color><param>#2aa198</param>"C-c u"</x-color> lsp-ui-imenu))

(<bold><x-color><param>#859900</param>with-hook</x-color></bold> lsp-ui-mode
           (diminish 'lsp-ui-mode))
#+end_src
<x-color><param>#002b36</param>*</x-color><x-color><param>#859900</param>* [x] lusty-explorer</x-color>
#+begin_src emacs-lisp

#+end_src
<x-color><param>#002b36</param>*</x-color><x-color><param>#859900</param>* [x] macro-math</x-color>
#+begin_src emacs-lisp

#+end_src
<x-color><param>#002b36</param>*</x-color><x-color><param>#859900</param>* [x] magit        </x-color>
#+begin_src emacs-lisp

#+end_src
<x-color><param>#002b36</param>*</x-color><x-color><param>#859900</param>* [x] magit-filenotify</x-color>
#+begin_src emacs-lisp

#+end_src
<x-color><param>#002b36</param>*</x-color><x-color><param>#859900</param>* [x] magit-gh-pulls</x-color>
#+begin_src emacs-lisp

#+end_src


<x-color><param>#002b36</param>*</x-color><x-color><param>#859900</param>* [x] markdown-mode        </x-color>
#+begin_src emacs-lisp

#+end_src
<x-color><param>#002b36</param>*</x-color><x-color><param>#859900</param>* [x] marshal        </x-color>
#+begin_src emacs-lisp

#+end_src
<x-color><param>#002b36</param>*</x-color><x-color><param>#859900</param>* [x] mc-extras        </x-color>
#+begin_src emacs-lisp

#+end_src
<x-color><param>#002b36</param>*</x-color><x-color><param>#859900</param>* [x] mmm-mode</x-color>
#+begin_src emacs-lisp

#+end_src
<x-color><param>#002b36</param>*</x-color><x-color><param>#859900</param>* [x] modern-cpp-font-lock        </x-color>
#+begin_src emacs-lisp
     (<bold><x-color><param>#859900</param>with-hook</x-color></bold> modern-cpp-font-lock-mode
                (diminish 'modern-cpp-font-lock-mode))
#+end_src
<x-color><param>#002b36</param>*</x-color><x-color><param>#859900</param>* [x] multiple-cursors        </x-color>
#+begin_src emacs-lisp

#+end_src
<x-color><param>#002b36</param>*</x-color><x-color><param>#859900</param>* [x] nadvice</x-color>
#+begin_src emacs-lisp
#+end_src
<x-color><param>#002b36</param>*</x-color><x-color><param>#859900</param>* [x] navi-mode        </x-color>
#+begin_src emacs-lisp

#+end_src
<x-color><param>#002b36</param>*</x-color><x-color><param>#859900</param>* [x] nov        </x-color>
#+begin_src emacs-lisp
     (<bold><x-color><param>#859900</param>with-hook</x-color></bold> after-init
                (add-to-list 'auto-mode-alist '(<x-color><param>#2aa198</param>"\\.epub\\'"</x-color> . nov-mode)))
#+end_src
<x-color><param>#002b36</param>*</x-color><x-color><param>#859900</param>* [x] oauth2 :disable</x-color>
#+begin_src emacs-lisp

#+end_src
<x-color><param>#002b36</param>*</x-color><x-color><param>#859900</param>* [x] ob-async</x-color>
#+begin_src emacs-lisp

#+end_src


<x-color><param>#002b36</param>*</x-color><x-color><param>#859900</param>* [x] org</x-color>
#+begin_src emacs-lisp
(<bold><x-color><param>#859900</param>with-hook</x-color></bold> org-mode
           (<bold><x-color><param>#859900</param>when</x-color></bold> (equal (buffer-name) <x-color><param>#2aa198</param>"init.org"</x-color>)
             (org-babel-hide-markers-mode 1)
             (diminish 'org-babel-hide-markers-mode)

             (auto-save-mode 1)
             (page-break-lines-mode 1))
           (org-pretty-table-mode 1)
           (diminish 'org-pretty-table-mode))


(<bold><x-color><param>#859900</param>with-package</x-color></bold> org
              (<bold><x-color><param>#859900</param>require</x-color></bold> '<bold><x-color><param>#268bd2</param>org-protocol</x-color></bold>)

              (<bold><x-color><param>#859900</param>require</x-color></bold> '<bold><x-color><param>#268bd2</param>org-pretty-table</x-color></bold>)
              
              (<bold><x-color><param>#859900</param>defun</x-color></bold> <x-color><param>#268bd2</param>get-html-title-from-url</x-color> (url)
                <x-color><param>#2aa198</param>"Return content in <<title> tag."</x-color>
                (<bold><x-color><param>#859900</param>require</x-color></bold> '<bold><x-color><param>#268bd2</param>mm-url</x-color></bold>)
                (let (x1 x2 (download-buffer (url-retrieve-synchronously url)))
                  (with-current-buffer download-buffer
                    (goto-char (point-min))
                    (setq x1 (search-forward "<<title>"))
                    (search-forward "<</title>")
                    (setq x2 (search-backward "<<"))
                    (mm-url-decode-entities-string (buffer-substring-no-properties x1 x2)))))

              

              (defun my-org-insert-link ()
                "Insert org link where default description is set to html title."
                (interactive)
                (let* ((url (read-string "URL: "))
                       (title (get-html-title-from-url url)))
                  (org-insert-link nil url title)))

              

              (defun org-agenda-show-agenda-and-todo (&optional arg)
                ""
                (interactive "P")
                (org-agenda arg "c")
                (org-agenda-fortnight-view))

              ;; ("P" "Research project" entry (file "~/Org/inbox.org")
              ;;  "* TODO %^{Project title} :%^G:\n:PROPERTIES:\n:CREATED:
              ;;     %U\n:END:\n%^{Project description}\n** [x] 
              ;;    TODO Literature review\n** [x] TODO %?\n** [x]
              ;;  TODO Summary\n** [x] TODO Reports\n** [x] Ideas\n"
              ;;  :clock-in t :clock-resume t)
              
              (defun transform-square-brackets-to-round-ones(string-to-transform)
                "Transforms [ into ( and ] into ), other chars left unchanged."
                (concat
                 (mapcar #'(lambda (c)
                             (if (equal c ?[) ?\( (if (equal c ?]) ?\) c ))) string-to-transform)))
              
              (setq org-capture-templates
                    `(("p" "Protocol" entry (file+headline "~/Dokument/notes.org" "Inbox")
                       "* %^{Title}\nSource: %u, %c\n #+BEGIN_QUOTE\n%i\n#+END_QUOTE\n\n\n%?")
                      ("L" "Protocol Link" entry (file+headline "~/Dokument/notes.org" "Inbox")
                       "* %? [[%:link][%(transform-square-brackets-to-round-ones\"%:description\")]]\n")
                      ("d" "Denote" plane (file "~/Dokument/notes.org")
                       "  %<<ymd:hms> %^{Description} %^g\n%? %U" :empty-lines 1)
                      ("n" "Note" entry (file+olp+datetree "~/Dokument/notes.org")
                       "* %^{Description} %^g\n%? %U" :empty-lines 1)
                      ("e" "Email" entry (file "~/Dokument/inbox.org")
                       "* TODO %? email |- %:from: %:subject :EMAIL:\n:PROPERTIES:\n:CREATED: %U\n:EMAIL-SOURCE: %l\n:END:\n%U\n" :clock-in t :clock-resume t)))

              (setq  org-log-done 'time
                     org-ditaa-jar-path "/usr/bin/ditaa"
                     org-todo-keywords '((sequence "TODO" "INPROGRESS" "DONE"))
                     org-todo-keyword-faces '(("INPROGRESS" . (:foreground "blue" :weight bold)))
                     org-directory (expand-file-name "~/Dokument/")
                     org-default-notes-file (expand-file-name "notes.org" org-directory)
                     org-use-speed-commands       t
                     org-src-preserve-indentation t
                     org-export-html-postamble    nil
                     org-hide-leading-stars       t
                     org-make-link-description    t
                     org-hide-emphasis-markers    t
                     org-startup-folded           'overview
                     org-startup-indented         nil))
<italic><x-color><param>#586e75</param>#+end_src</x-color></italic>
<x-color><param>#002b36</param>*</x-color><x-color><param>#859900</param>* [x] org-appear</x-color>
#+begin_src emacs-lisp

#+end_src
<x-color><param>#002b36</param>*</x-color><x-color><param>#859900</param>* [x] org-contrib</x-color>
#+begin_src emacs-lisp

#+end_src


<x-color><param>#002b36</param>*</x-color><x-color><param>#859900</param>* [x] org-download</x-color>
#+begin_src emacs-lisp

#+end_src
<x-color><param>#002b36</param>*</x-color><x-color><param>#859900</param>* [ ] org-noter-pdftools</x-color>
#+begin_src emacs-lisp
     (<bold><x-color><param>#859900</param>unless</x-color></bold> (equal system-type 'windows-nt)
       (<bold><x-color><param>#859900</param>with-package</x-color></bold> pdf-annot
                     (add-hook 'pdf-annot-activate-handler-functions #'org-noter-pdftools-jump-to-note)))
#+end_src
<x-color><param>#002b36</param>*</x-color><x-color><param>#859900</param>* [ ] org-pdftools</x-color>
#+begin_src emacs-lisp
     (<bold><x-color><param>#859900</param>unless</x-color></bold> (eq system-type 'windows-nt)
       (<bold><x-color><param>#859900</param>with-hook</x-color></bold> org-load
                  (org-pdftools-setup-link)))
#+end_src
<x-color><param>#002b36</param>*</x-color><x-color><param>#859900</param>* [x] org-projectile</x-color>
#+begin_src emacs-lisp
     (<bold><x-color><param>#859900</param>with-package</x-color></bold> org-projectile
                   (<bold><x-color><param>#859900</param>require</x-color></bold> '<bold><x-color><param>#268bd2</param>org-projectile</x-color></bold>)
                   (<bold><x-color><param>#859900</param>setq</x-color></bold> org-projectile-projects-file <x-color><param>#2aa198</param>"~Dokument/todos.org"</x-color>
                         org-agenda-files (append org-agenda-files (org-projectile-todo-files)))
                   (<bold><x-color><param>#859900</param>push</x-color></bold> (org-projectile-project-todo-entry) org-capture-templates)
              
                   (<bold><x-color><param>#859900</param>defkeys</x-color></bold> global-map
                     <x-color><param>#2aa198</param>"C-c n p"</x-color> org-projectile-project-todo-completing-read
                     <x-color><param>#2aa198</param>"C-c c"</x-color> org-capture))
#+end_src
<x-color><param>#002b36</param>*</x-color><x-color><param>#859900</param>* [x] org-projectile-helm</x-color>
#+begin_src emacs-lisp

#+end_src
<x-color><param>#002b36</param>*</x-color><x-color><param>#859900</param>* [x] org-ref</x-color>
#+begin_src emacs-lisp

#+end_src


<x-color><param>#002b36</param>*</x-color><x-color><param>#859900</param>* [x] org-roam</x-color>
#+begin_src emacs-lisp

#+end_src

<x-color><param>#002b36</param>*</x-color><x-color><param>#859900</param>* [x] org-sidebar</x-color>
#+begin_src emacs-lisp

#+end_src
<x-color><param>#002b36</param>*</x-color><x-color><param>#859900</param>* [x] org-superstar</x-color>
#+begin_src emacs-lisp

#+end_src
<x-color><param>#002b36</param>*</x-color><x-color><param>#859900</param>* [x] outshine</x-color>
#+begin_src emacs-lisp
(<bold><x-color><param>#859900</param>with-hook</x-color></bold> outshine-mode (diminish 'outshine-mode))
#+end_src

<x-color><param>#002b36</param>*</x-color><x-color><param>#859900</param>* [x] overseer</x-color>
#+begin_src emacs-lisp

#+end_src
<x-color><param>#002b36</param>*</x-color><x-color><param>#859900</param>* [x] package-lint</x-color>
#+begin_src emacs-lisp

#+end_src
<x-color><param>#002b36</param>*</x-color><x-color><param>#859900</param>* [x] package-lint</x-color>
#+begin_src emacs-lisp

#+end_src
<x-color><param>#002b36</param>*</x-color><x-color><param>#859900</param>* [x] page-break-lines</x-color>
#+begin_src emacs-lisp
(<bold><x-color><param>#859900</param>with-hook</x-color></bold> page-break-lines-mode (diminish 'page-break-lines-mode))
#+end_src
<x-color><param>#002b36</param>*</x-color><x-color><param>#859900</param>* [x] paxedit</x-color>
#+begin_src emacs-lisp

#+end_src
<x-color><param>#002b36</param>*</x-color><x-color><param>#859900</param>* [ ] pdf-tools</x-color>
#+begin_src emacs-lisp
     (<bold><x-color><param>#859900</param>unless</x-color></bold> (equal system-type 'windows-nt)
       (<bold><x-color><param>#859900</param>with-package</x-color></bold> pdf-tools
                     <x-color><param>#586e75</param>;;(pdf-tools-install)
</x-color>                     (<bold><x-color><param>#859900</param>setq-default</x-color></bold> pdf-view-display-size 'fit-page)))
#+end_src
<x-color><param>#002b36</param>*</x-color><x-color><param>#859900</param>* [x] pfuture</x-color>
#+begin_src emacs-lisp

#+end_src
<x-color><param>#002b36</param>*</x-color><x-color><param>#859900</param>* [x] plisp-mode</x-color>
#+begin_src emacs-lisp

#+end_src
<x-color><param>#002b36</param>*</x-color><x-color><param>#859900</param>* [x] polymode</x-color>
#+begin_src emacs-lisp

#+end_src
<x-color><param>#002b36</param>*</x-color><x-color><param>#859900</param>* [x] prettier-js        </x-color>
#+begin_src emacs-lisp
     (<bold><x-color><param>#859900</param>with-package</x-color></bold> prettier-js
                   (diminish 'prettier-js-mode))

     (<bold><x-color><param>#859900</param>with-hook</x-color></bold> js2-mode
                (prettier-js-mode))

     (<bold><x-color><param>#859900</param>with-hook</x-color></bold> rjsx-mode
                (prettier-js-mode))
#+end_src
<x-color><param>#002b36</param>*</x-color><x-color><param>#859900</param>* [x] pretty-symbols</x-color>
#+begin_src emacs-lisp

#+end_src
<x-color><param>#002b36</param>*</x-color><x-color><param>#859900</param>* [x] prodigy</x-color>
#+begin_src emacs-lisp

#+end_src
<x-color><param>#002b36</param>*</x-color><x-color><param>#859900</param>* [x] projectile        </x-color>
#+begin_src emacs-lisp
     (<bold><x-color><param>#859900</param>with-package</x-color></bold> projectile
                   (<bold><x-color><param>#859900</param>setq</x-color></bold> projectile-indexing-method 'alien))
#+end_src
<x-color><param>#002b36</param>*</x-color><x-color><param>#859900</param>* [x] pulseaudio-control</x-color>
#+begin_src emacs-lisp

#+end_src
<x-color><param>#002b36</param>*</x-color><x-color><param>#859900</param>* [x] pyenv-mode</x-color>
#+begin_src emacs-lisp
(<bold><x-color><param>#859900</param>with-package</x-color></bold> pyenv-mode
              (<bold><x-color><param>#859900</param>setq</x-color></bold> python-shell-interpreter <x-color><param>#2aa198</param>"ipython"</x-color>
                    python-shell-interpreter-args <x-color><param>#2aa198</param>"-i --simple-prompt"</x-color>))
#+end_src
<x-color><param>#002b36</param>*</x-color><x-color><param>#859900</param>* [x] pyvenv</x-color>
#+begin_src emacs-lisp
(<bold><x-color><param>#859900</param>with-package</x-color></bold> pyvenv
              (setenv <x-color><param>#2aa198</param>"WORKON_HOME"</x-color> (expand-file-name <x-color><param>#2aa198</param>"~/miniconda3/envs"</x-color>))
              (<bold><x-color><param>#859900</param>setq</x-color></bold> pyvenv-menu t))
(<bold><x-color><param>#859900</param>with-hook</x-color></bold> pyvenv-post-activate-hooks
           (pyvenv-restart-python))
(<bold><x-color><param>#859900</param>with-hook</x-color></bold> python-mode
           (pyvenv-mode +1))
#+end_src
<x-color><param>#002b36</param>*</x-color><x-color><param>#859900</param>* [x] qrencode</x-color>
#+begin_src emacs-lisp

#+end_src

<x-color><param>#002b36</param>*</x-color><x-color><param>#859900</param>* [x] rainbow-mode</x-color>
#+begin_src emacs-lisp

#+end_src


<x-color><param>#002b36</param>*</x-color><x-color><param>#859900</param>* [x] recentf        </x-color>
#+begin_src emacs-lisp

#+end_src
<x-color><param>#002b36</param>*</x-color><x-color><param>#859900</param>* [x] refine</x-color>
#+begin_src emacs-lisp

#+end_src
<x-color><param>#002b36</param>*</x-color><x-color><param>#859900</param>* [x] request        </x-color>
#+begin_src emacs-lisp

#+end_src
<x-color><param>#002b36</param>*</x-color><x-color><param>#859900</param>* [x] rjsx-mode</x-color>
#+begin_src emacs-lisp
     (<bold><x-color><param>#859900</param>with-package</x-color></bold> rjsx-mode
                   (<bold><x-color><param>#859900</param>setq</x-color></bold> js2-mode-show-parse-errors nil
                         js2-mode-show-strict-warnings nil
                         js2-basic-offset 2
                         js-indent-level 2)
                   (<bold><x-color><param>#859900</param>setq-local</x-color></bold> flycheck-disabled-checkers (cl-union flycheck-disabled-checkers
                                                                    '(javascript-jshint))) <x-color><param>#586e75</param>; jshint doesn't work for JSX
</x-color>                   (electric-pair-mode 1))

     (<bold><x-color><param>#859900</param>with-hook</x-color></bold> after-init
                (add-to-list 'auto-mode-alist '(<x-color><param>#2aa198</param>"\\.js\\'"</x-color> . rjsx-mode))
                (add-to-list 'auto-mode-alist '(<x-color><param>#2aa198</param>"\\.jsx\\'"</x-color> . rjsx-mode)))
#+end_src
<x-color><param>#002b36</param>*</x-color><x-color><param>#859900</param>* [x] run-command</x-color>
#+begin_src emacs-lisp

#+end_src
<x-color><param>#002b36</param>*</x-color><x-color><param>#859900</param>* [x] rustic</x-color>
#+begin_src emacs-lisp

#+end_src

<x-color><param>#002b36</param>*</x-color><x-color><param>#859900</param>* [x] s</x-color>
#+begin_src emacs-lisp

#+end_src
<x-color><param>#002b36</param>*</x-color><x-color><param>#859900</param>* [x] simple-httpd</x-color>
#+begin_src emacs-lisp

#+end_src
<x-color><param>#002b36</param>*</x-color><x-color><param>#859900</param>* [x] sly</x-color>
#+begin_src emacs-lisp
(<bold><x-color><param>#859900</param>with-package</x-color></bold> sly
              (<bold><x-color><param>#859900</param>setq</x-color></bold> inferior-lisp-program <x-color><param>#2aa198</param>"/usr/bin/sbcl"</x-color>)
              (<bold><x-color><param>#859900</param>defkeys</x-color></bold> sly-prefix-map
                <x-color><param>#2aa198</param>"M-h"</x-color> sly-documentation-lookup))
#+end_src
<x-color><param>#002b36</param>*</x-color><x-color><param>#859900</param>* [x] sly-macrostep</x-color>
#+begin_src emacs-lisp

#+end_src
<x-color><param>#002b36</param>*</x-color><x-color><param>#859900</param>* [x] sly-named-readtables</x-color>
#+begin_src emacs-lisp

#+end_src
<x-color><param>#002b36</param>*</x-color><x-color><param>#859900</param>* [x] smart-jump        </x-color>
#+begin_src emacs-lisp

#+end_src
<x-color><param>#002b36</param>*</x-color><x-color><param>#859900</param>* [x] smex        </x-color>
#+begin_src emacs-lisp

#+end_src
<x-color><param>#002b36</param>*</x-color><x-color><param>#859900</param>* [x] smooth-scrolling</x-color>
#+begin_src emacs-lisp

#+end_src
<x-color><param>#002b36</param>*</x-color><x-color><param>#859900</param>* [x] solarized-theme        </x-color>
#+begin_src emacs-lisp
     (<bold><x-color><param>#859900</param>with-hook</x-color></bold> after-init
                (load-theme 'solarized-dark t))
#+end_src
<x-color><param>#002b36</param>*</x-color><x-color><param>#859900</param>* [x] sphinx-doc        </x-color>
#+begin_src emacs-lisp

#+end_src
<x-color><param>#002b36</param>*</x-color><x-color><param>#859900</param>* [x] string-edit        </x-color>
#+begin_src emacs-lisp

#+end_src
<x-color><param>#002b36</param>*</x-color><x-color><param>#859900</param>* [x] system-packages</x-color>
#+begin_src emacs-lisp

#+end_src
<x-color><param>#002b36</param>*</x-color><x-color><param>#859900</param>* [x] tide        </x-color>
#+begin_src emacs-lisp

#+end_src
<x-color><param>#002b36</param>*</x-color><x-color><param>#859900</param>* [x] treemacs</x-color>
#+begin_src emacs-lisp
(<bold><x-color><param>#859900</param>with-package</x-color></bold> treemacs
              (<bold><x-color><param>#859900</param>setq</x-color></bold> treemacs-no-png-images t
                    treemacs-width 24))
(<bold><x-color><param>#859900</param>with-hook</x-color></bold> python-mode
           (<bold><x-color><param>#859900</param>defkeys</x-color></bold> python-mode-map
             <x-color><param>#2aa198</param>"C-f t"</x-color> treemacs))
#+end_src
<x-color><param>#002b36</param>*</x-color><x-color><param>#859900</param>* [x] visual-ascii-mode</x-color>
#+begin_src emacs-lisp

#+end_src
<x-color><param>#002b36</param>*</x-color><x-color><param>#859900</param>* [x] which-key        </x-color>
#+begin_src emacs-lisp
(<bold><x-color><param>#859900</param>with-hook</x-color></bold> which-key
           (diminish 'which-key-mode))

(<bold><x-color><param>#859900</param>with-hook</x-color></bold> after-init

           (which-key-mode))
#+end_src
<x-color><param>#002b36</param>*</x-color><x-color><param>#859900</param>* [x] winum</x-color>
#+begin_src emacs-lisp

#+end_src
<x-color><param>#002b36</param>*</x-color><x-color><param>#859900</param>* [x] with-simulated-input</x-color>
#+begin_src emacs-lisp

#+end_src
<x-color><param>#002b36</param>*</x-color><x-color><param>#859900</param>* [x] wrap-region        </x-color>
#+begin_src emacs-lisp
     (<bold><x-color><param>#859900</param>with-hook</x-color></bold> after-init
                (wrap-region-global-mode t)
                (diminish 'wrap-region-mode))
#+end_src
<x-color><param>#002b36</param>*</x-color><x-color><param>#859900</param>* [x] yapfify</x-color>
#+begin_src emacs-lisp
     (<bold><x-color><param>#859900</param>with-hook</x-color></bold> python-mode
                (yapf-mode +1))
#+end_src
<x-color><param>#002b36</param>*</x-color><x-color><param>#859900</param>* [x] yasnippet</x-color>
#+begin_src emacs-lisp
(<bold><x-color><param>#859900</param>when-idle</x-color></bold> (<bold><x-color><param>#859900</param>require</x-color></bold> '<bold><x-color><param>#268bd2</param>yasnippet</x-color></bold>))

(<bold><x-color><param>#859900</param>with-package</x-color></bold> yasnippet
              (add-hook 'hippie-expand-try-functions-list 'yas-hippie-try-expand)
              (<bold><x-color><param>#859900</param>setq</x-color></bold> yas-key-syntaxes '(<x-color><param>#2aa198</param>"w_"</x-color> <x-color><param>#2aa198</param>"w_."</x-color> <x-color><param>#2aa198</param>"^ "</x-color>)
                    <x-color><param>#586e75</param>;; yas-snippet-dirs (eval-when-compile
</x-color>                    <x-color><param>#586e75</param>;;                  (list (expand-file-name "~/.emacs.d/snippets")))
</x-color>                    yas-expand-only-for-last-commands nil)

              (define-key yas-minor-mode-map (kbd <x-color><param>#2aa198</param>"C-i"</x-color>) nil)
              (define-key yas-minor-mode-map (kbd <x-color><param>#2aa198</param>"TAB"</x-color>) nil)
              (define-key yas-minor-mode-map (kbd <x-color><param>#2aa198</param>"<<tab>"</x-color>) nil)
              (define-key yas-minor-mode-map (kbd <x-color><param>#2aa198</param>"C-<<return>"</x-color>) 'yas-expand))

(<bold><x-color><param>#859900</param>with-hook</x-color></bold> yas-minor-mode
           (diminish 'yas-mode 'yas-minor-mode))
#+end_src
<x-color><param>#002b36</param>*</x-color><x-color><param>#859900</param>* [x] yasnippet-snippets</x-color>
#+begin_src emacs-lisp

#+end_src
   
<x-color><param>#002b36</param>*</x-color><x-color><param>#859900</param>* [ none  ] [x] abbrev</x-color>
#+begin_src emacs-lisp
(<bold><x-color><param>#859900</param>with-package</x-color></bold> abbrev
              (diminish 'abbrev-mode))
#+end_src

<x-color><param>#002b36</param>*</x-color><x-color><param>#859900</param>* [ none  ] [x] c/c++</x-color>
#+begin_src emacs-lisp
  (<bold><x-color><param>#859900</param>with-hook</x-color></bold> after-init
             (add-hook 'c-initialization-hook 'my-c-init)
             (add-hook 'c++-mode-hook 'my-c++-init)
             (add-to-list 'auto-mode-alist '(<x-color><param>#2aa198</param>"\\.<bold><x-color><param>#859900</param>\\</x-color><x-color><param>#b58900</param>(</x-color></bold>c<bold><x-color><param>#859900</param>\\</x-color><x-color><param>#b58900</param>|</x-color></bold>h<bold><x-color><param>#859900</param>\\</x-color><x-color><param>#b58900</param>|</x-color></bold>inc<bold><x-color><param>#859900</param>\\</x-color><x-color><param>#b58900</param>|</x-color></bold>src<bold><x-color><param>#859900</param>\\</x-color><x-color><param>#b58900</param>)</x-color></bold>\\'"</x-color> . c-mode))
             (add-to-list 'auto-mode-alist '(<x-color><param>#2aa198</param>"\\.<bold><x-color><param>#859900</param>\\</x-color><x-color><param>#b58900</param>(</x-color></bold>|hh<bold><x-color><param>#859900</param>\\</x-color><x-color><param>#b58900</param>|</x-color></bold>cc<bold><x-color><param>#859900</param>\\</x-color><x-color><param>#b58900</param>|</x-color></bold>c++<bold><x-color><param>#859900</param>\\</x-color><x-color><param>#b58900</param>|</x-color></bold>cpp<bold><x-color><param>#859900</param>\\</x-color><x-color><param>#b58900</param>|</x-color></bold>tpp<bold><x-color><param>#859900</param>\\</x-color><x-color><param>#b58900</param>|</x-color></bold>hpp<bold><x-color><param>#859900</param>\\</x-color><x-color><param>#b58900</param>|</x-color></bold>hxx<bold><x-color><param>#859900</param>\\</x-color><x-color><param>#b58900</param>|</x-color></bold>cxx<bold><x-color><param>#859900</param>\\</x-color><x-color><param>#b58900</param>|</x-color></bold>inl<bold><x-color><param>#859900</param>\\</x-color><x-color><param>#b58900</param>|</x-color></bold>cu<bold><x-color><param>#859900</param>\\</x-color><x-color><param>#b58900</param>)</x-color></bold>'"</x-color> . c++-mode))
             (<bold><x-color><param>#859900</param>when-idle</x-color></bold>  (<bold><x-color><param>#859900</param>require</x-color></bold> '<bold><x-color><param>#268bd2</param>c++-setup</x-color></bold>)))
#+end_src
<x-color><param>#002b36</param>*</x-color><x-color><param>#859900</param>* [ none  ] [x] dap-java</x-color>
#+begin_src emacs-lisp

#+end_src
<x-color><param>#002b36</param>*</x-color><x-color><param>#859900</param>* [ none  ] [x] dired</x-color>
#+begin_src emacs-lisp
(<bold><x-color><param>#859900</param>with-hook</x-color></bold> after-init
           (<bold><x-color><param>#859900</param>defkeys</x-color></bold> global-map
                    <x-color><param>#2aa198</param>"C-x C-j"</x-color>   dired-jump
                    <x-color><param>#2aa198</param>"C-x 4 C-j"</x-color> dired-jump-other-window)
           (<bold><x-color><param>#859900</param>when-idle</x-color></bold> (<bold><x-color><param>#859900</param>require</x-color></bold> '<bold><x-color><param>#268bd2</param>dired</x-color></bold>)))

(<bold><x-color><param>#859900</param>with-package</x-color></bold> dired
              (<bold><x-color><param>#859900</param>require</x-color></bold> '<bold><x-color><param>#268bd2</param>dired-extras</x-color></bold>)
              (<bold><x-color><param>#859900</param>setq</x-color></bold> dired-dwim-target t
                    global-auto-revert-non-file-buffers nil
                    dired-recursive-copies  'always
                    dired-recursive-deletes 'always
                    dired-listing-switches <x-color><param>#2aa198</param>"-lA --si --time-style=long-iso --group-directories-first"</x-color>
                    wdired-use-vertical-movement t
                    wdired-allow-to-change-permissions t
                    dired-omit-files-p t
                    dired-omit-files (concat dired-omit-files <x-color><param>#2aa198</param>"<bold><x-color><param>#859900</param>\\</x-color><x-color><param>#b58900</param>|</x-color></bold>^\\..+$"</x-color>))

              (<bold><x-color><param>#859900</param>dolist</x-color></bold> (ext  (list (list (openwith-make-extension-regexp
                                         '(<x-color><param>#2aa198</param>"flac"</x-color> <x-color><param>#2aa198</param>"mpg"</x-color> <x-color><param>#2aa198</param>"mpeg"</x-color> <x-color><param>#2aa198</param>"mp3"</x-color> <x-color><param>#2aa198</param>"mp4"</x-color>
                                           <x-color><param>#2aa198</param>"avi"</x-color> <x-color><param>#2aa198</param>"wmv"</x-color> <x-color><param>#2aa198</param>"wav"</x-color> <x-color><param>#2aa198</param>"mov"</x-color> <x-color><param>#2aa198</param>"flv"</x-color> <x-color><param>#2aa198</param>"ts"</x-color> <x-color><param>#2aa198</param>"m4b"</x-color>
                                           <x-color><param>#2aa198</param>"ogm"</x-color> <x-color><param>#2aa198</param>"ogg"</x-color> <x-color><param>#2aa198</param>"mkv"</x-color> <x-color><param>#2aa198</param>"webm"</x-color> <x-color><param>#2aa198</param>"m4v"</x-color> <x-color><param>#2aa198</param>"m4a"</x-color>))
                                        <x-color><param>#2aa198</param>"mpv"</x-color>
                                        '(file))

                                  (list (openwith-make-extension-regexp
                                         '(<x-color><param>#2aa198</param>"html"</x-color> <x-color><param>#2aa198</param>"htm"</x-color>))
                                        (getenv <x-color><param>#2aa198</param>"BROWSER"</x-color>)
                                        '(file))))
                (add-to-list 'openwith-associations ext))

                (<bold><x-color><param>#859900</param>with-system</x-color></bold> windows-nt
                             (<bold><x-color><param>#859900</param>setq</x-color></bold> ls-lisp-use-insert-directory-program <x-color><param>#2aa198</param>"gls"</x-color>))
                
                (<bold><x-color><param>#859900</param>with-system</x-color></bold> gnu/linux
                             (<bold><x-color><param>#859900</param>dolist</x-color></bold> (ext (list (list (openwith-make-extension-regexp
                                                       '(<x-color><param>#2aa198</param>"xbm"</x-color> <x-color><param>#2aa198</param>"pbm"</x-color> <x-color><param>#2aa198</param>"pgm"</x-color> <x-color><param>#2aa198</param>"ppm"</x-color> <x-color><param>#2aa198</param>"pnm"</x-color>
                                                         <x-color><param>#2aa198</param>"png"</x-color> <x-color><param>#2aa198</param>"gif"</x-color> <x-color><param>#2aa198</param>"bmp"</x-color> <x-color><param>#2aa198</param>"tif"</x-color> <x-color><param>#2aa198</param>"jpeg"</x-color> <x-color><param>#2aa198</param>"jpg"</x-color>))
                                                      <x-color><param>#2aa198</param>"feh"</x-color>
                                                      '(file))
                                                (list (openwith-make-extension-regexp
                                                       '(<x-color><param>#2aa198</param>"doc"</x-color> <x-color><param>#2aa198</param>"xls"</x-color> <x-color><param>#2aa198</param>"ppt"</x-color> <x-color><param>#2aa198</param>"odt"</x-color> <x-color><param>#2aa198</param>"ods"</x-color> <x-color><param>#2aa198</param>"odg"</x-color> <x-color><param>#2aa198</param>"odp"</x-color> <x-color><param>#2aa198</param>"rtf"</x-color>))
                                                      <x-color><param>#2aa198</param>"libreoffice"</x-color>
                                                      '(file))
                                                (list (openwith-make-extension-regexp
                                                       '(<x-color><param>#2aa198</param>"htm"</x-color> <x-color><param>#2aa198</param>"html"</x-color>))
                                                      (getenv <x-color><param>#2aa198</param>"BROWSER"</x-color>)
                                                      '(file))

                                                (list (openwith-make-extension-regexp
                                                       '(<x-color><param>#2aa198</param>"\\.lyx"</x-color>))
                                                      <x-color><param>#2aa198</param>"lyx"</x-color>
                                                      '(file))

                                                (list (openwith-make-extension-regexp
                                                       '(<x-color><param>#2aa198</param>"chm"</x-color>))
                                                      <x-color><param>#2aa198</param>"kchmviewer"</x-color>
                                                      '(file))

                                                (list (openwith-make-extension-regexp
                                                       '(<x-color><param>#2aa198</param>"pdf"</x-color> <x-color><param>#2aa198</param>"ps"</x-color> <x-color><param>#2aa198</param>"ps.gz"</x-color> <x-color><param>#2aa198</param>"dvi"</x-color> <x-color><param>#2aa198</param>"epub"</x-color> <x-color><param>#2aa198</param>"djv"</x-color> <x-color><param>#2aa198</param>"djvu"</x-color> <x-color><param>#2aa198</param>"mobi"</x-color> <x-color><param>#2aa198</param>"azw3"</x-color>))
                                                      <x-color><param>#2aa198</param>"okular"</x-color>
                                                      '(file))))
                               (add-to-list 'openwith-associations ext)))

                (<bold><x-color><param>#859900</param>defkeys</x-color></bold> dired-mode-map
                         <x-color><param>#2aa198</param>"C-x <<M-S-return>"</x-color> dired-open-current-as-sudo
                         <x-color><param>#2aa198</param>"r"</x-color>                dired-do-rename
                         <x-color><param>#2aa198</param>"C-S-r"</x-color>            wdired-change-to-wdired-mode
                         <x-color><param>#2aa198</param>"C-r C-s"</x-color>          tmtxt/dired-async-get-files-size
                         <x-color><param>#2aa198</param>"C-r C-r"</x-color>          tda/rsync
                         <x-color><param>#2aa198</param>"C-r C-z"</x-color>          tda/zip
                         <x-color><param>#2aa198</param>"C-r C-u"</x-color>          tda/unzip
                         <x-color><param>#2aa198</param>"C-r C-a"</x-color>          tda/rsync-multiple-mark-file
                         <x-color><param>#2aa198</param>"C-r C-e"</x-color>          tda/rsync-multiple-empty-list
                         <x-color><param>#2aa198</param>"C-r C-d"</x-color>          tda/rsync-multiple-remove-item
                         <x-color><param>#2aa198</param>"C-r C-v"</x-color>          tda/rsync-multiple
                         <x-color><param>#2aa198</param>"C-r C-s"</x-color>          tda/get-files-size
                         <x-color><param>#2aa198</param>"C-r C-q"</x-color>          tda/download-to-current-dir
                         <x-color><param>#2aa198</param>"S-<<return>"</x-color>       dired-openwith
                         <x-color><param>#2aa198</param>"C-'"</x-color>              dired-collapse-mode
                         <x-color><param>#2aa198</param>"M-p"</x-color>              scroll-down-line
                         <x-color><param>#2aa198</param>"M-m"</x-color>              dired-mark-backward
                         <x-color><param>#2aa198</param>"M-<<"</x-color>              dired-goto-first
                         <x-color><param>#2aa198</param>"M->"</x-color>              dired-goto-last
                         <x-color><param>#2aa198</param>"M-<<return>"</x-color>       my-run
                         <x-color><param>#2aa198</param>"C-S-f"</x-color>            dired-narrow
                         <x-color><param>#2aa198</param>"P"</x-color>                peep-dired
                         <x-color><param>#2aa198</param>"<<f1>"</x-color>             term-toggle
                         <x-color><param>#2aa198</param>"TAB"</x-color>              dired-subtree-toggle
                         <x-color><param>#2aa198</param>"f"</x-color>                dired-subtree-fold-all
                         <x-color><param>#2aa198</param>"z"</x-color>                dired-get-size
                         <x-color><param>#2aa198</param>"e"</x-color>                dired-subtree-expand-all))
              (<bold><x-color><param>#859900</param>with-package</x-color></bold> dired-x (diminish 'dired-omit-mode))
              (<bold><x-color><param>#859900</param>with-hook</x-color></bold> dired-omit-mode (diminish 'dired-omit-mode))
              (<bold><x-color><param>#859900</param>with-hook</x-color></bold> dired-mode
                         (dired-omit-mode t)
                         (diminish 'dired-omit-mode)
                         (dired-async-mode t)
                         (dired-hide-details-mode)
                         (dired-auto-readme-mode t))
#+end_src
<x-color><param>#002b36</param>*</x-color><x-color><param>#859900</param>* [ none  ] [x] early-init</x-color>
#+begin_src emacs-lisp
    (<bold><x-color><param>#859900</param>with-hook</x-color></bold> early-init
               (<bold><x-color><param>#859900</param>defvar</x-color></bold> <x-color><param>#268bd2</param>default-gc-cons-threshold</x-color> gc-cons-threshold)
               (<bold><x-color><param>#859900</param>defvar</x-color></bold> <x-color><param>#268bd2</param>old-file-name-handler</x-color> file-name-handler-alist)
               (<bold><x-color><param>#859900</param>setq</x-color></bold> file-name-handler-alist nil
                     gc-cons-threshold most-positive-fixnum
                     frame-inhibit-implied-resize t
                     bidi-inhibit-bpa t
                     initial-scratch-message <x-color><param>#2aa198</param>""</x-color>
                     inhibit-splash-screen t
                     inhibit-startup-screen t
                     inhibit-startup-message t
                     inhibit-startup-echo-area-message t
                     show-paren-delay 0
                     use-dialog-box nil
                     visible-bell nil
                     ring-bell-function 'ignore
                     load-prefer-newer t
                     shell-command-default-error-buffer <x-color><param>#2aa198</param>"Shell Command Errors"</x-color>
                     native-comp-async-report-warnings-errors 'silent
                     comp-speed 3)

               (<bold><x-color><param>#859900</param>when</x-color></bold> 'native-comp-compiler-options
                 (<bold><x-color><param>#859900</param>setq</x-color></bold> native-comp-async-jobs-number 4))
               
               (<bold><x-color><param>#859900</param>setq-default</x-color></bold> abbrev-mode t
                             indent-tabs-mode nil
                             indicate-empty-lines t
                             cursor-type 'bar
                             fill-column 80
                             auto-fill-function 'do-auto-fill
                             cursor-in-non-selected-windows 'hollow
                             bidi-display-reordering 'left-to-right
                             bidi-paragraph-direction 'left-to-right)

               (<bold><x-color><param>#859900</param>push</x-color></bold> '(menu-bar-lines . 0) default-frame-alist)
               (<bold><x-color><param>#859900</param>push</x-color></bold> '(tool-bar-lines . 0) default-frame-alist)
               (<bold><x-color><param>#859900</param>push</x-color></bold> '(vertical-scroll-bars . nil) default-frame-alist)
               (<bold><x-color><param>#859900</param>push</x-color></bold> '(font . <x-color><param>#2aa198</param>"Anonymous Pro-16"</x-color>) default-frame-alist)
               <x-color><param>#586e75</param>;; (push '(font . "Some imaginary font") default-frame-alist)
</x-color>               <x-color><param>#586e75</param>;;(custom-set-faces '(default ((t (:height 120)))))
</x-color>               <x-color><param>#586e75</param>;; (let ((default-directory  (expand-file-name "lisp" user-emacs-directory)))
</x-color>               <x-color><param>#586e75</param>;;   (normal-top-level-add-to-load-path '("."))
</x-color>               <x-color><param>#586e75</param>;;   (normal-top-level-add-subdirs-to-load-path))

</x-color>               <x-color><param>#586e75</param>;; (let ((deff (gethash 'default face--new-frame-defaults)))
</x-color>               <x-color><param>#586e75</param>;;   (aset (cdr deff) 4 240)
</x-color>               <x-color><param>#586e75</param>;;   (puthash 'default deff face--new-frame-defaults))
</x-color>               (define-prefix-command 'C-z-map)
               (global-set-key (kbd <x-color><param>#2aa198</param>"C-z"</x-color>) 'C-z-map)
               (global-unset-key (kbd <x-color><param>#2aa198</param>"C-v"</x-color>)))
#+end_src
<x-color><param>#002b36</param>*</x-color><x-color><param>#859900</param>* [ none  ] [x] emacs</x-color>
#+begin_src emacs-lisp
(<bold><x-color><param>#859900</param>with-hook</x-color></bold> text-mode (<bold><x-color><param>#859900</param>setq</x-color></bold> fill-column 80))
(<bold><x-color><param>#859900</param>with-hook</x-color></bold> abbrev-mode (diminish 'abbrev-mode))
(<bold><x-color><param>#859900</param>with-hook</x-color></bold> auto-complete-mode (diminish 'auto-complete-mode))
(<bold><x-color><param>#859900</param>with-hook</x-color></bold> auto-fill-mode (diminish 'auto-fill-function))
(<bold><x-color><param>#859900</param>with-hook</x-color></bold> auto-insert-mode (diminish 'auto-insert-mode))
(<bold><x-color><param>#859900</param>with-hook</x-color></bold> edit-abbrevs-mode (diminish 'abbrev-mode))
(<bold><x-color><param>#859900</param>with-hook</x-color></bold> eldoc-mode (diminish 'eldoc-mode))
(<bold><x-color><param>#859900</param>with-hook</x-color></bold> electric-pair-mode (diminish 'electric-pair-mode))
(<bold><x-color><param>#859900</param>with-hook</x-color></bold> subword-mode (diminish 'subword-mode))
(<bold><x-color><param>#859900</param>with-hook</x-color></bold> wrap-region-mode (diminish 'wrap-region-mode))
(<bold><x-color><param>#859900</param>with-hook</x-color></bold> winner-mode (diminish 'winner-mode))

(<bold><x-color><param>#859900</param>with-hook</x-color></bold> after-init
           (setenv <x-color><param>#2aa198</param>"BROWSER"</x-color> <x-color><param>#2aa198</param>"firefox-developer-edition"</x-color>)
           
           (<bold><x-color><param>#859900</param>with-system</x-color></bold> windows-nt
                        <x-color><param>#586e75</param>;; (global-disable-mouse-mode 1)
</x-color>                        (<bold><x-color><param>#859900</param>setq</x-color></bold> w32-get-true-file-attributes nil
                              w32-pipe-read-delay 0
                              w32-pipe-buffer-size (* 64 1024)
                              <x-color><param>#586e75</param>;;package-gnupghome-dir "c:/Users/arthu/.emacs.d/elpa/gnupg"
</x-color>                              source-directory <x-color><param>#2aa198</param>"c:/emacs/emsrc/emacs"</x-color>
                              command-line-x-option-alist nil
                              command-line-ns-option-alist nil))
           
           (<bold><x-color><param>#859900</param>let</x-color></bold> ((etc (expand-file-name <x-color><param>#2aa198</param>"etc"</x-color> user-emacs-directory)))
             (<bold><x-color><param>#859900</param>unless</x-color></bold> (file-directory-p etc)
               (make-directory etc))
             (<bold><x-color><param>#859900</param>setq</x-color></bold> show-paren-style 'expression
                   message-log-max 10000 <x-color><param>#586e75</param>;; oriignal 1000
</x-color>                   shell-file-name <x-color><param>#2aa198</param>"bash"</x-color>
                   shell-command-switch <x-color><param>#2aa198</param>"-ic"</x-color>
                   delete-exited-processes t
                   echo-keystrokes 0.1
                   create-lock-files nil
                   winner-dont-bind-my-keys t
                   auto-window-vscroll nil
                   require-final-newline t
                   next-line-add-newlines t
                   bookmark-save-flag 1
                   delete-selection-mode t
                   initial-major-mode 'emacs-lisp-mode
                   confirm-kill-processes nil
                   help-enable-symbol-autoload t
                   large-file-warning-threshold nil
                   save-abbrevs 'silent
                   save-interprogram-paste-before-kill t
                   save-place-file (expand-file-name <x-color><param>#2aa198</param>"places"</x-color> etc)
                   max-lisp-eval-depth '100000
                   max-specpdl-size '1000000
                   scroll-preserve-screen-position 'always
                   scroll-conservatively 1
                   maximum-scroll-margin 1
                   scroll-margin 0
                   make-backup-files nil
                   kill-buffer-delete-auto-save-files t
                   backup-directory-alist `((<x-color><param>#2aa198</param>"."</x-color> . ,etc))
                   custom-file (expand-file-name <x-color><param>#2aa198</param>"custom.el"</x-color> etc)
                   abbrev-file-name (expand-file-name <x-color><param>#2aa198</param>"abbrevs.el"</x-color> etc)
                   bookmark-default-file (expand-file-name <x-color><param>#2aa198</param>"bookmarks"</x-color> etc)))

           (add-to-list 'display-buffer-alist '(<x-color><param>#2aa198</param>"\\*Compile-Log\\*"</x-color>
                                                (display-buffer-no-window)))
           (add-to-list 'display-buffer-alist
                 `((,(<bold><x-color><param>#859900</param>rx</x-color></bold> bos (<bold><x-color><param>#859900</param>or</x-color></bold> <x-color><param>#2aa198</param>"*Apropos*"</x-color> <x-color><param>#2aa198</param>"*Help*"</x-color> <x-color><param>#2aa198</param>"*helpful*"</x-color> <x-color><param>#2aa198</param>"*info*"</x-color> <x-color><param>#2aa198</param>"*Summary*"</x-color>)
                         (0+ not-newline))
                    (display-buffer-same-window)
                    (dedicated t)
                    (display-buffer-reuse-mode-window display-buffer-pop-up-window)
                    (mode apropos-mode help-mode helpful-mode Info-mode Man-mode))))

           (add-to-list 'display-buffer-alist '((<x-color><param>#2aa198</param>"*Help*"</x-color> (window-parameters . ((dedicated . t))))))
           
           (fset 'yes-or-no-p 'y-or-n-p)
           (electric-indent-mode 1)
           (electric-pair-mode 1)
           (global-auto-revert-mode)
           (global-hl-line-mode 1)
           (global-subword-mode 1)
           (auto-compression-mode 1)
           (auto-image-file-mode)
           (auto-insert-mode 1)
           (auto-save-visited-mode 1)
           (blink-cursor-mode 1)
           (column-number-mode 1)
           (delete-selection-mode 1)
           (display-time-mode 1)
           (pending-delete-mode 1)
           (show-paren-mode t)
           (save-place-mode 1)
           (winner-mode t)
           (turn-on-auto-fill)

           (pixel-scroll-precision-mode +1)

           

           (<bold><x-color><param>#859900</param>defkeys</x-color></bold> global-map
             <x-color><param>#586e75</param>;; Window-buffer operations
</x-color>             <x-color><param>#2aa198</param>"C-<<insert>"</x-color>    term-toggle-term
             <x-color><param>#2aa198</param>"<<insert>"</x-color>      term-toggle-eshell
             <x-color><param>#2aa198</param>"C-v C-t"</x-color>       term-toggle-ielm
             [f9]            ispell-word
             [S-f10]         next-buffer
             [f10]           previous-buffer
             [f12]           kill-buffer-but-not-some
             [M-f12]         kill-buffer-other-window
             [C-M-f12]       only-current-buffer

             <x-color><param>#586e75</param>;; Emacs windows
</x-color>             <x-color><param>#2aa198</param>"C-v <<left>"</x-color>   windmove-swap-states-left
             <x-color><param>#2aa198</param>"C-v <<right>"</x-color>  windmove-swap-states-right
             <x-color><param>#2aa198</param>"C-v <<up>"</x-color>     windmove-swap-states-up
             <x-color><param>#2aa198</param>"C-v <<down>"</x-color>   windmove-swap-states-down
             <x-color><param>#2aa198</param>"C-v o"</x-color>        other-window
             <x-color><param>#2aa198</param>"C-v j"</x-color>        windmove-left
             <x-color><param>#2aa198</param>"C-v l"</x-color>        windmove-right
             <x-color><param>#2aa198</param>"C-v i"</x-color>        windmove-up
             <x-color><param>#2aa198</param>"C-v k"</x-color>        windmove-down
             <x-color><param>#586e75</param>;; "C-v a"        send-to-window-left
</x-color>             <x-color><param>#586e75</param>;; "C-v d"        send-to-window-right
</x-color>             <x-color><param>#586e75</param>;; "C-v w"        send-to-window-up
</x-color>             <x-color><param>#586e75</param>;; "C-v s"        send-to-window-down
</x-color>             <x-color><param>#586e75</param>;; "C-v v"        maximize-window-vertically
</x-color>             <x-color><param>#586e75</param>;; "C-v h"        maximize-window-horizontally
</x-color>             <x-color><param>#2aa198</param>"C-v n"</x-color>        next-buffer
             <x-color><param>#2aa198</param>"C-v p"</x-color>        previous-buffer
             <x-color><param>#2aa198</param>"C-v +"</x-color>        text-scale-increase
             <x-color><param>#2aa198</param>"C-v -"</x-color>        text-scale-decrease
             <x-color><param>#2aa198</param>"C-v C-+"</x-color>      enlarge-window-horizontally
             <x-color><param>#2aa198</param>"C-v C-,"</x-color>      enlarge-window-vertically
             <x-color><param>#2aa198</param>"C-v C--"</x-color>      shrink-window-horizontally
             <x-color><param>#2aa198</param>"C-v C-."</x-color>      shrink-window-vertically
             <x-color><param>#2aa198</param>"C-v u"</x-color>        winner-undo
             <x-color><param>#2aa198</param>"C-v r"</x-color>        winner-redo
             <x-color><param>#2aa198</param>"C-v C-k"</x-color>      delete-window
             <x-color><param>#2aa198</param>"C-v C-l"</x-color>      windmove-delete-left
             <x-color><param>#2aa198</param>"C-v C-r"</x-color>      windmove-delete-right
             <x-color><param>#2aa198</param>"C-v C-a"</x-color>      windmove-delete-up
             <x-color><param>#2aa198</param>"C-v C-b"</x-color>      windmove-delete-down
             <x-color><param>#2aa198</param>"C-v <<return>"</x-color> delete-other-windows
             <x-color><param>#2aa198</param>"C-v ,"</x-color>        split-window-right
             <x-color><param>#2aa198</param>"C-v ."</x-color>        split-window-below
             <x-color><param>#586e75</param>;;"C-h M-i"      help-toggle-source-view
</x-color>             <x-color><param>#586e75</param>;; "C-v C-s"      swap-two-buffers
</x-color>             [remap other-window]  ace-window
             
             <x-color><param>#586e75</param>;; cursor movement
</x-color>             <x-color><param>#2aa198</param>"M-n"</x-color>     scroll-up-line
             <x-color><param>#2aa198</param>"M-N"</x-color>     scroll-up-command
             <x-color><param>#2aa198</param>"M-p"</x-color>     scroll-down-line
             <x-color><param>#2aa198</param>"M-P"</x-color>     scroll-down-command
             <x-color><param>#2aa198</param>"C-v c"</x-color>   org-capture
             <x-color><param>#2aa198</param>"C-v C-c"</x-color> avy-goto-char
             <x-color><param>#2aa198</param>"C-v C-v"</x-color> avy-goto-word-1
             <x-color><param>#2aa198</param>"C-v C-w"</x-color> avy-goto-word-0
             <x-color><param>#2aa198</param>"C-v C-g"</x-color> avy-goto-line

             <x-color><param>#586e75</param>;; some random stuff
</x-color>             <x-color><param>#2aa198</param>"C-h C-i"</x-color> (<bold><x-color><param>#859900</param>lambda</x-color></bold>() 
                         (<bold><x-color><param>#859900</param>interactive</x-color></bold>)
                         (find-file (expand-file-name
                                     <x-color><param>#2aa198</param>"init.org"</x-color>
                                     user-emacs-directory))))
           
           (<bold><x-color><param>#859900</param>when-idle</x-color></bold> (<bold><x-color><param>#859900</param>require</x-color></bold> '<bold><x-color><param>#268bd2</param>extras</x-color></bold>))
           (<bold><x-color><param>#859900</param>when-idle</x-color></bold> (<bold><x-color><param>#859900</param>require</x-color></bold> '<bold><x-color><param>#268bd2</param>sv-kalender</x-color></bold>)
                      <x-color><param>#586e75</param>;;(add-to-list 'special-display-frame-alist '(tool-bar-lines . 0))
</x-color>                      (<bold><x-color><param>#859900</param>when</x-color></bold> (<bold><x-color><param>#859900</param>and</x-color></bold> custom-file (file-exists-p custom-file))
                        (load custom-file 'noerror))
                      (add-hook 'comint-output-filter-functions
                                #'comint-watch-for-password-prompt))
           
           (<bold><x-color><param>#859900</param>setq</x-color></bold> gc-cons-threshold       default-gc-cons-threshold
                 <x-color><param>#586e75</param>;;gc-cons-percentage      0.1
</x-color>                 file-name-handler-alist old-file-name-handler))
#+end_src
<x-color><param>#002b36</param>*</x-color><x-color><param>#859900</param>* [ none  ] [x] emacs-director</x-color>
<italic><x-color><param>#586e75</param>  #+GIT: https://github.com/bard/emacs-director</x-color></italic>
#+begin_src emacs-lisp

#+end_src
<x-color><param>#002b36</param>*</x-color><x-color><param>#859900</param>* [ none  ] [x] emacs-gif-screencast</x-color>
<italic><x-color><param>#586e75</param>  #+GIT: https://gitlab.com/ambrevar/emacs-gif-screencast</x-color></italic>
#+begin_src emacs-lisp

#+end_src
<x-color><param>#002b36</param>*</x-color><x-color><param>#859900</param>* [ none  ] [x] emacs-run-command</x-color>
<italic><x-color><param>#586e75</param>  #+GIT: https://github.com/bard/emacs-run-command</x-color></italic>
#+begin_src emacs-lisp

#+end_src
<x-color><param>#002b36</param>*</x-color><x-color><param>#859900</param>* [ none  ] [x] emacs-velocity</x-color>
<italic><x-color><param>#586e75</param>  #+GIT: https://github.com/bard/emacs-velocity</x-color></italic>
#+begin_src emacs-lisp

#+end_src
<x-color><param>#002b36</param>*</x-color><x-color><param>#859900</param>* [ none  ] [x] gnus</x-color>
#+begin_src emacs-lisp
(<bold><x-color><param>#859900</param>with-hook</x-color></bold> after-init
           (<bold><x-color><param>#859900</param>require</x-color></bold> '<bold><x-color><param>#268bd2</param>gnus</x-color></bold>))

(<bold><x-color><param>#859900</param>with-hook</x-color></bold> message-mode
           (<bold><x-color><param>#859900</param>setq</x-color></bold> fill-column 80))

(<bold><x-color><param>#859900</param>with-package</x-color></bold> gnus
              
              (<bold><x-color><param>#859900</param>require</x-color></bold> '<bold><x-color><param>#268bd2</param>nnir</x-color></bold>)

              (<bold><x-color><param>#859900</param>setq</x-color></bold> user-full-name    <x-color><param>#2aa198</param>"Arthur Miller"</x-color>
                    user-mail-address <x-color><param>#2aa198</param>"arthur.miller@live.com"</x-color>)
              
              <x-color><param>#586e75</param>;; for the outlook
</x-color>              (<bold><x-color><param>#859900</param>setq</x-color></bold> gnus-select-method '(nnimap <x-color><param>#2aa198</param>"live.com"</x-color>
                                                (nnimap-address <x-color><param>#2aa198</param>"imap-mail.outlook.com"</x-color>)
                                                (nnimap-server-port 993)
                                                (nnimap-stream ssl)
                                                (nnir-search-engine imap)
                                                ))
              
              <x-color><param>#586e75</param>;; Send email through SMTP
</x-color>              (<bold><x-color><param>#859900</param>setq</x-color></bold> message-send-mail-function 'smtpmail-send-it
                    smtpmail-default-smtp-server <x-color><param>#2aa198</param>"smtp-mail.outlook.com"</x-color>
                    smtpmail-smtp-service 587
                    smtpmail-local-domain <x-color><param>#2aa198</param>"homepc"</x-color>)

              (<bold><x-color><param>#859900</param>setq</x-color></bold> gnus-thread-sort-functions
                    '(gnus-thread-sort-by-most-recent-date
                      (not gnus-thread-sort-by-number)))
              (<bold><x-color><param>#859900</param>setq</x-color></bold> gnus-use-cache t gnus-view-pseudo-asynchronously t)
              <x-color><param>#586e75</param>;; Show more MIME-stuff:
</x-color>              (<bold><x-color><param>#859900</param>setq</x-color></bold> gnus-mime-display-multipart-related-as-mixed t)
              <x-color><param>#586e75</param>;; http://www.gnu.org/software/emacs/manual/html_node/gnus/_005b9_002e2_005d.html
</x-color>              (<bold><x-color><param>#859900</param>setq</x-color></bold> gnus-use-correct-string-widths nil)
              <x-color><param>#586e75</param>;;(setq nnmail-expiry-wait 'immediate)
</x-color>              <x-color><param>#586e75</param>;; set renderer for html mail to w3m in emacs
</x-color>              <x-color><param>#586e75</param>;;(setq mm-text-html-renderer 'eww)
</x-color>              (<bold><x-color><param>#859900</param>setq</x-color></bold> gnus-inhibit-images nil)

              <x-color><param>#586e75</param>;; set gnus-parameter
</x-color>              <x-color><param>#586e75</param>;; (setq gnus-parameters
</x-color>              <x-color><param>#586e75</param>;;       '(("nnimap.*"
</x-color>              <x-color><param>#586e75</param>;;          (gnus-use-scoring nil)
</x-color>              <x-color><param>#586e75</param>;;          (expiry-wait . 2)
</x-color>              <x-color><param>#586e75</param>;;          (display . all))))
</x-color>              
              <x-color><param>#586e75</param>;;[[http://stackoverflow.com/questions/4982831/i-dont-want-to-expire-mail-in-gnus]]
</x-color>              <x-color><param>#586e75</param>;;(setq gnus-large-newsgroup 'nil)
</x-color>              <x-color><param>#586e75</param>;; Smileys:
</x-color>              (<bold><x-color><param>#859900</param>setq</x-color></bold> smiley-style 'medium)
              
              <x-color><param>#586e75</param>;; Use topics per default:
</x-color>              (add-hook 'gnus-group-mode-hook 'gnus-topic-mode)
              (<bold><x-color><param>#859900</param>setq</x-color></bold> gnus-message-archive-group '((format-time-string <x-color><param>#2aa198</param>"sent.%Y"</x-color>)))
              (<bold><x-color><param>#859900</param>setq</x-color></bold> gnus-server-alist '((<x-color><param>#2aa198</param>"archive"</x-color> nnfolder <x-color><param>#2aa198</param>"archive"</x-color> (nnfolder-directory <x-color><param>#2aa198</param>"~/mail/archive"</x-color>)
                                         (nnfolder-active-file <x-color><param>#2aa198</param>"~/mail/archive/active"</x-color>)
                                         (nnfolder-get-new-mail nil)
                                         (nnfolder-inhibit-expiry t))))
              
              (<bold><x-color><param>#859900</param>setq</x-color></bold> gnus-topic-topology '((<x-color><param>#2aa198</param>"live.com"</x-color> visible)))
              
              <x-color><param>#586e75</param>;; each topic corresponds to a public imap folder
</x-color>              (<bold><x-color><param>#859900</param>setq</x-color></bold> gnus-topic-alist '((<x-color><param>#2aa198</param>"live.com"</x-color>)
                                       (<x-color><param>#2aa198</param>"Gnus"</x-color>)))
              )
#+end_src
<x-color><param>#002b36</param>*</x-color><x-color><param>#859900</param>* [ none  ] [x] helm-convert</x-color>
<italic><x-color><param>#586e75</param>  #+GIT: https://github.com/Zacalot/helm-convert</x-color></italic>
#+begin_src emacs-lisp

#+end_src
<x-color><param>#002b36</param>*</x-color><x-color><param>#859900</param>* [ none  ] [x] ielm</x-color>
#+begin_src emacs-lisp
(<bold><x-color><param>#859900</param>with-hook</x-color></bold> ielm
           (turn-on-eldoc-mode))
#+end_src

<x-color><param>#002b36</param>*</x-color><x-color><param>#859900</param>* [ none  ] [x] inferior-python-mode</x-color>
#+begin_src emacs-lisp
  (<bold><x-color><param>#859900</param>with-hook</x-color></bold> inferior-python-mode
             (hide-mode-line-mode))
#+end_src
<x-color><param>#002b36</param>*</x-color><x-color><param>#859900</param>* [ none  ] [x] lisp & elisp</x-color>
#+begin_src emacs-lisp
    (<bold><x-color><param>#859900</param>with-hook</x-color></bold> after-init
               (set-default 'auto-mode-alist
                            (append '((<x-color><param>#2aa198</param>"\\.lisp"</x-color> . lisp-mode)
                                      (<x-color><param>#2aa198</param>"\\.lsp"</x-color> . lisp-mode)
                                      (<x-color><param>#2aa198</param>"\\.cl"</x-color> . lisp-mode))
                                    auto-mode-alist)))

    (<bold><x-color><param>#859900</param>with-package</x-color></bold> elisp-mode
                  (<bold><x-color><param>#859900</param>require</x-color></bold> '<bold><x-color><param>#268bd2</param>elisp-extras</x-color></bold>)
                  (<bold><x-color><param>#859900</param>require</x-color></bold> '<bold><x-color><param>#268bd2</param>helm-pages</x-color></bold>)
                  <x-color><param>#586e75</param>;;(require 'helm-extras)
</x-color>              
    <x-color><param>#586e75</param>;; from https://www.emacswiki.org/emacs/auto-insert-for-asdf
</x-color>                  <x-color><param>#586e75</param>;; (push `(("\\.asd\\'" . "ASDF Skeleton") 
</x-color>    <x-color><param>#586e75</param>;; 	              "System Name: "
</x-color>    <x-color><param>#586e75</param>;; 	              "
</x-color>    <x-color><param>#586e75</param>;; (eval-when (:compile-toplevel :load-toplevel :execute)
</x-color>    <x-color><param>#586e75</param>;;   (unless (find-package :" str ".system)
</x-color>    <x-color><param>#586e75</param>;;     (defpackage :" str ".system
</x-color>    <x-color><param>#586e75</param>;;       (:use :common-lisp :asdf))))

</x-color>

    <x-color><param>#586e75</param>;; (in-package :" str ".system)

</x-color>    <x-color><param>#586e75</param>;; (defsystem :" str " 
</x-color>    <x-color><param>#586e75</param>;;   :description " ?\" (read-string "Description: ") ?\"" 
</x-color>    <x-color><param>#586e75</param>;;   :author \"" (user-full-name) " <<" user-mail-address ">\" 
</x-color>    <x-color><param>#586e75</param>;;   :licence \"" (read-string "License: ") "\" 
</x-color>    <x-color><param>#586e75</param>;;   :version \"" (read-string "Version: ") "\" 
</x-color>    <x-color><param>#586e75</param>;;   :components (()) 
</x-color>    <x-color><param>#586e75</param>;;   :depends-on ())") 
</x-color>    <x-color><param>#586e75</param>;;                     auto-insert-alist)

</x-color>              
                  (<bold><x-color><param>#859900</param>defkeys</x-color></bold> emacs-lisp-mode-map
                           <x-color><param>#2aa198</param>"\C-c a"</x-color> emacs-lisp-byte-compile-and-load
                           <x-color><param>#2aa198</param>"\C-c b"</x-color> emacs-lisp-byte-compile
                           <x-color><param>#2aa198</param>"\C-c c"</x-color> emacs-lisp-native-compile-and-load
                           <x-color><param>#2aa198</param>"\C-c d"</x-color> eval-defun
                           <x-color><param>#2aa198</param>"\C-c e"</x-color> eval-buffer
                           <x-color><param>#2aa198</param>"\C-c i"</x-color> reindent-buffer
                           <x-color><param>#2aa198</param>"\C-c l"</x-color> eval-last-sexp
                           <x-color><param>#2aa198</param>"\C-c n"</x-color> eval-next-sexp
                           <x-color><param>#2aa198</param>"\C-c r"</x-color> fc-eval-and-replace
                           <x-color><param>#2aa198</param>"\C-c s"</x-color> eval-surrounding-sexp))

    (<bold><x-color><param>#859900</param>with-hook</x-color></bold> emacs-lisp-mode
               (<bold><x-color><param>#859900</param>setq</x-color></bold> fill-column 80)
               (company-mode 1)
               (outshine-mode 1)
               (yas-minor-mode 1)
               (page-break-lines-mode 1))
#+end_src
<x-color><param>#002b36</param>*</x-color><x-color><param>#859900</param>* [ none  ] [x] package</x-color>
#+begin_src emacs-lisp
(<bold><x-color><param>#859900</param>with-package</x-color></bold>
 package
 (<bold><x-color><param>#859900</param>let</x-color></bold> ((package-install-local-multifile-packages-symlinked t))
   (<bold><x-color><param>#859900</param>defun</x-color></bold> <x-color><param>#268bd2</param>package-unpack</x-color> (pkg-desc)
  <x-color><param>#2aa198</param>"Install the contents of the current buffer as a package."</x-color>
  (<bold><x-color><param>#859900</param>let*</x-color></bold> ((name (package-desc-name pkg-desc))
         (dirname (package-desc-full-name pkg-desc))
         (pkg-dir (expand-file-name dirname package-user-dir)))
    (<bold><x-color><param>#859900</param>pcase</x-color></bold> (package-desc-kind pkg-desc)
      ('dir
       (<bold><x-color><param>#859900</param>if</x-color></bold> package-install-local-multifile-packages-symlinked
           (make-symbolic-link (expand-file-name default-directory) pkg-dir t)
         (<bold><x-color><param>#859900</param>progn</x-color></bold>
           (make-directory pkg-dir t)
           (<bold><x-color><param>#859900</param>let</x-color></bold> ((file-list
                  (directory-files
                   default-directory 'full <x-color><param>#2aa198</param>"\\`[<bold><x-color><param>#b58900</param>^</x-color></bold>.].*\\.el\\'"</x-color> 'nosort)))
             (<bold><x-color><param>#859900</param>dolist</x-color></bold> (source-file file-list)
               (<bold><x-color><param>#859900</param>let</x-color></bold> ((target-el-file
                      (expand-file-name (file-name-nondirectory source-file) pkg-dir)))
                 (copy-file source-file target-el-file t)))
             (<bold><x-color><param>#859900</param>setf</x-color></bold> (package-desc-kind pkg-desc)
                   (<bold><x-color><param>#859900</param>if</x-color></bold> (> (length file-list) 1) 'tar 'single))))))
      ('tar
       (make-directory package-user-dir t)
       (<bold><x-color><param>#859900</param>let*</x-color></bold> ((default-directory (file-name-as-directory package-user-dir)))
         (package-untar-buffer dirname)))
      ('single
       (<bold><x-color><param>#859900</param>let</x-color></bold> ((el-file (expand-file-name (format <x-color><param>#2aa198</param>"%s.el"</x-color> name) pkg-dir)))
         (make-directory pkg-dir t)
         (package--write-file-no-coding el-file)))
      (kind (<bold>error</bold> <x-color><param>#2aa198</param>"Unknown package kind: %S"</x-color> kind)))
    (package--make-autoloads-and-stuff pkg-desc pkg-dir)
    (<bold><x-color><param>#859900</param>let</x-color></bold> ((new-desc (package-load-descriptor pkg-dir)))
      (<bold><x-color><param>#859900</param>unless</x-color></bold> (equal (package-desc-full-name new-desc)
                     (package-desc-full-name pkg-desc))
        (<bold>error</bold> <x-color><param>#2aa198</param>"The retrieved package (`<bold><x-color><param>#268bd2</param>%s</x-color></bold>') doesn't match what the archive offered (`<bold><x-color><param>#268bd2</param>%s</x-color></bold>')"</x-color>
               (package-desc-full-name new-desc) (package-desc-full-name pkg-desc)))
      (<bold><x-color><param>#859900</param>when</x-color></bold> (package-activate-1 new-desc <bold><x-color><param>#839496</param>:reload</x-color></bold> <bold><x-color><param>#839496</param>:deps</x-color></bold>)
        (package--compile new-desc)
        (<bold><x-color><param>#859900</param>when</x-color></bold> package-native-compile
          (package--native-compile-async new-desc))
        (package--load-files-for-activation new-desc <bold><x-color><param>#839496</param>:reload</x-color></bold>)))
    pkg-dir))))
   
#+end_src
<x-color><param>#002b36</param>*</x-color><x-color><param>#859900</param>* [ none  ] [x] speed-of-thought-lisp</x-color>
#+begin_src emacs-lisp

#+end_src
<x-color><param>#002b36</param>*</x-color><x-color><param>#859900</param>* [ none  ] [x] system-cores.el</x-color>
#+begin_src emacs-lisp

#+end_src
<x-color><param>#002b36</param>*</x-color><x-color><param>#859900</param>* [ none  ] [x] term-toggle</x-color>
#+begin_src emacs-lisp
(<bold><x-color><param>#859900</param>with-package</x-color></bold> term-toggle
              (<bold><x-color><param>#859900</param>setq</x-color></bold> term-toggle-no-confirm-exit t
                    term-toggle-kill-buffer-on-term-exit t))
#+end_src
<x-color><param>#002b36</param>*</x-color><x-color><param>#859900</param>* [ none  ] [x] wdired</x-color>
#+begin_src emacs-lisp
(<bold><x-color><param>#859900</param>with-package</x-color></bold> wdired
              (<bold><x-color><param>#859900</param>defkeys</x-color></bold> wdired-mode-map
                <x-color><param>#2aa198</param>"<<return>"</x-color>    dired-find-file
                <x-color><param>#2aa198</param>"M-<<return>"</x-color>  my-run
                <x-color><param>#2aa198</param>"S-<<return>"</x-color>  dired-openwith
                <x-color><param>#2aa198</param>"M-<<"</x-color>         dired-go-to-first
                <x-color><param>#2aa198</param>"M->"</x-color>         dired-go-to-last
                <x-color><param>#2aa198</param>"M-p"</x-color>         scroll-down-line))
#+end_src


